breaks = breaks
)
breaks <- c(
seq(0, .1, length.out = 50),     # blue → yellow
seq(.2, 5, length.out = 50), # yellow → orange
seq(5.1, 10, length.out = 50) # orange → red
)
# Generate the same number of colors - 1
my_colors <- colorRampPalette(c("blue", "yellow", "orange", "red"))(length(breaks) - 1)
p <- pheatmap(
mat_filtered,
annotation_col = annotation_col,
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE,
border_color = "black",
color = my_colors,
breaks = breaks
)
label_results
all_zero_genes <- rownames(mat_filtered)[rowSums(mat_filtered != 0) == 0]
if (length(all_zero_genes) == 0) {
cat("✅ All genes have at least one non-zero value.\n")
} else {
cat("⚠️ Some genes are all zeros:\n")
print(all_zero_genes)
}
num_nonzero_genes <- sum(rowSums(mat_filtered != 0) > 0)
num_nonzero_genes
nrow(mat)
mat
# 2: Extract expression matrix
mat <- assay(vst_data)
mat <- mat[rownames(mat) %in% all_de_genes, ]
# 3: Ordering the data
metadata_ordered <- meta[match(colnames(mat), meta$SampleName), ]
if(any(is.na(metadata_ordered$SampleName))){
stop("Some samples in the matrix do not have matching metadata!")
}
# 4: Build a sorting key (Genotype → HarvestTime → Treatment → Endophyte)
metadata_ordered <- metadata_ordered %>%
arrange(Genotype, HarvestTime, Treatment, Endophyte)
# 5: Reorder the matrix columns according to this sort
mat <- mat[, metadata_ordered$SampleName]
# 6: Create annotation data frame for pheatmap
annotation_col <- metadata_ordered[, c("Genotype", "HarvestTime", "Treatment", "Endophyte")]
rownames(annotation_col) <- metadata_ordered$SampleName
# 7: Graph it
breaks <- c(
seq(0, 5, length.out = 50),     # blue → yellow
seq(5.01, 10, length.out = 50), # yellow → orange
seq(10.01, 15, length.out = 50) # orange → red
)
# Generate the same number of colors - 1
my_colors <- colorRampPalette(c("blue", "yellow", "orange", "red"))(length(breaks) - 1)
# Plot
p <- pheatmap(
mat,
annotation_col = annotation_col,
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE,
border_color = "black",
color = my_colors,
breaks = breaks
)
# Wrap heatmap in gtable
heatmap_grob <- p$gtable
# Create text grobs
y_label <- textGrob("Samples", rot=90, gp=gpar(fontsize=14))
x_label <- textGrob("Genes", gp = gpar(fontsize = 14),hjust = 0.5, x = unit(0.4, "npc")
)
# Arrange using layout_matrix
layout_mat <- rbind(
c(NA, 1),  # Top row: NA on left, X label on right
c(2, 3)    # Bottom row: Y label on left, heatmap on right
)
heat <- grid.arrange(
x_label,    # index 1 in layout
y_label,    # index 2
heatmap_grob, # index 3
layout_matrix = layout_mat,
widths = c(1, 8), heights = c(1, 8)
)
ggsave(heat,file ="4d_Normalized_count_heatmap.png", width = 10, height = 10, dpi = 300 )
# Step 1: Find the group of each sample
sample_to_group <- sapply(colnames(mat), function(samp) {
# Genotype
geno <- str_extract(samp, "^CTE\\d+")
# Harvest time
harvest_code <- str_extract(samp, "O\\d+|J\\d+")
harvest <- ifelse(harvest_code == "O17", "October_2017",
ifelse(harvest_code == "O16", "October_2016",
ifelse(harvest_code == "J16", "June_2016",
ifelse(harvest_code == "J17", "June_2017", harvest_code))))
# Treatment
treat_code <- str_extract(samp, "HP|H|C")
treat <- ifelse(treat_code == "HP", "HeatxPercipitation",
ifelse(treat_code == "H", "Heat",
ifelse(treat_code == "C", "Control", "Other")))
# Combine
paste(geno, harvest, treat, sep="_")
})
# Make a copy of mat to modify
mat_filtered <- mat
# Loop over samples
for (samp in colnames(mat_filtered)) {
group <- sample_to_group[samp]           # get the group for this sample
deg_genes <- names(label_results[[group]])    # genes that are DEGs in this group
# Set expression to 0 for genes not in deg_genes
mat_filtered[!rownames(mat_filtered) %in% deg_genes, samp] <- 0
}
breaks <- c(
seq(0, .1, length.out = 50),     # blue → yellow
seq(.2, 5, length.out = 50), # yellow → orange
seq(5.1, 10, length.out = 50) # orange → red
)
# Generate the same number of colors - 1
my_colors <- colorRampPalette(c("blue", "yellow", "orange", "red"))(length(breaks) - 1)
p <- pheatmap(
mat_filtered,
annotation_col = annotation_col,
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE,
border_color = "black",
color = my_colors,
breaks = breaks
)
all_zero_genes <- rownames(mat_filtered)[rowSums(mat_filtered != 0) == 0]
if (length(all_zero_genes) == 0) {
cat("✅ All genes have at least one non-zero value.\n")
} else {
cat("⚠️ Some genes are all zeros:\n")
print(all_zero_genes)
}
num_nonzero_genes <- sum(rowSums(mat_filtered != 0) > 0)
num_nonzero_genes
sample_to_group
colnames(mat_filtered)
sample_to_group["CTE46N_O16_C1__S16_T2"]
head(label_results)
names(label_results)
length(label_results)
label_results$CTE46_June_2016_Control
label_results$CTE46_June_2016_Heat
label_results$CTE46_June_2016_HeatxPercipitation
colnames(mat)
# Step 1: Find the group of each sample
sample_to_group <- sapply(colnames(mat), function(samp) {
# Genotype
geno <- str_extract(samp, "^CTE\\d+")
# Harvest time
harvest_code <- str_extract(samp, "O\\d+|J\\d+")
harvest <- case_when(
harvest_code == "O17" ~ "October_2017",
harvest_code == "O16" ~ "October_2016",
harvest_code == "J16" ~ "June_2016",
harvest_code == "J17" ~ "June_2017",
TRUE ~ harvest_code
)
# Treatment (C, H, HP)
treat_code <- str_extract(samp, "(?<=_[^_]+_)(HP|H|C)(?=\\d)")
treat <- case_when(
treat_code == "HP" ~ "HeatxPercipitation",
treat_code == "H"  ~ "Heat",
treat_code == "C"  ~ "Control",
TRUE ~ "Other"
)
# Combine
paste(geno, harvest, treat, sep = "_")
})
# Step 1: Find the group of each sample
sample_to_group <- sapply(colnames(mat), function(samp) {
# Genotype
geno <- str_extract(samp, "^CTE\\d+")
# Harvest time
harvest_code <- str_extract(samp, "O\\d+|J\\d+")
harvest <- case_when(
harvest_code == "O17" ~ "October_2017",
harvest_code == "O16" ~ "October_2016",
harvest_code == "J16" ~ "June_2016",
harvest_code == "J17" ~ "June_2017",
TRUE ~ harvest_code
)
# Treatment (C, H, HP) – fixed
parts <- str_split(samp, "_")[[1]]
treat_code <- str_extract(parts[3], "HP|H|C")
treat <- case_when(
treat_code == "HP" ~ "HeatxPercipitation",
treat_code == "H"  ~ "Heat",
treat_code == "C"  ~ "Control",
TRUE ~ "Other"
)
paste(geno, harvest, treat, sep = "_")
})
# Make a copy of mat to modify
mat_filtered <- mat
# Loop over samples
for (samp in colnames(mat_filtered)) {
group <- sample_to_group[samp]           # get the group for this sample
deg_genes <- names(label_results[[group]])    # genes that are DEGs in this group
# Set expression to 0 for genes not in deg_genes
mat_filtered[!rownames(mat_filtered) %in% deg_genes, samp] <- 0
}
breaks <- c(
seq(0, .1, length.out = 50),     # blue → yellow
seq(.2, 5, length.out = 50), # yellow → orange
seq(5.1, 10, length.out = 50) # orange → red
)
# Generate the same number of colors - 1
my_colors <- colorRampPalette(c("blue", "yellow", "orange", "red"))(length(breaks) - 1)
p <- pheatmap(
mat_filtered,
annotation_col = annotation_col,
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE,
border_color = "black",
color = my_colors,
breaks = breaks
)
# Wrap heatmap in gtable
heatmap_grob <- p$gtable
# Create text grobs
y_label <- textGrob("Samples", rot=90, gp=gpar(fontsize=14))
x_label <- textGrob("Genes", gp = gpar(fontsize = 14),hjust = 0.5, x = unit(0.4, "npc")
)
# Arrange using layout_matrix
layout_mat <- rbind(
c(NA, 1),  # Top row: NA on left, X label on right
c(2, 3)    # Bottom row: Y label on left, heatmap on right
)
heat2 <- grid.arrange(
x_label,    # index 1 in layout
y_label,    # index 2
heatmap_grob, # index 3
layout_matrix = layout_mat,
widths = c(1, 8), heights = c(1, 8)
)
sample_to_group
unique(sample_to_group)
label_results$CTE31_June_2017_Control
label_results$CTE31_June_2017_Heat
label_results$CTE31_June_2017_HeatxPercipitation
#### Creating lists of different sample groups to look at
names(results_list_CloneXHTxTreat)
results_list_CloneXHTxTreat$CTE31_June_2017_Control
results_list_CloneXHTxTreat$CTE31_June_2017_Control
label_results$CTE31_June_2017_HeatxPercipitation
unique(unlist(lapply(label_results, names)))
unique(sort((unlist(lapply(label_results, names))))
q
unique(sort((unlist(lapply(label_results, names)))))
unique(sort((unlist(lapply(label_results, names)))))
length(all_de_genes)
colnames(mat)
length(colnames(mat))
vst_data
dds <- readRDS("/home/darrian/Documents/RNA_seq_fescue/r_data/dds.rds")
dds
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(tidyverse)
library(grid)
library(data.table)
library(pheatmap)
library(variancePartition)
library(BiocGenerics)
library(lme4)
# install.packages("unix")
# Increase memory of R to 12 GB
memory.limit(size=12000)  #Might not need. Memory should not be capped in newer R versions
# File locations
data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
Featurecount <- read.table(Featurecount_loc, header = TRUE)
###############################
# Fixing data
###############################
# Featurecount$feature <- rownames(Featurecount)
# # Move the new column to the first position
# Featurecount <- Featurecount[, c("feature", setdiff(names(Featurecount), "feature"))]
# Creating the MetaData
IDs <- colnames(Featurecount)
IDs <- as.data.frame(IDs)
IDs <- IDs[-1, ]
# write.csv(IDs,"featurenames.txt",row.names = FALSE)
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Clone = str_extract(SampleName, "CTE\\d+"),
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode %in% c("J16", "J17") ~ "June",
HarvestCode %in% c("O16", "O17") ~ "October",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "J16" ~ "2016",
HarvestCode == "O16" ~ "2016",
HarvestCode == "J17" ~ "2017",
HarvestCode == "O17" ~ "2017",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('HP'='HeatxPercipitation','H'='Heat', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
rep_str3 = c('Heateat'='Heat')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str3)
metadata <- subset(metadata, select = -c(HarvestCode))
Featurecount <- Featurecount[, colnames(Featurecount) %in% metadata$SampleName]
ncol(Featurecount)
nrow(metadata)
###############################
# Running DeSeq2
###############################
#Makes DeSeq data set
dds <- DESeqDataSetFromMatrix(countData = Featurecount,
colData = metadata,
design= ~ Clone + Month + Year + Endophyte + Treatment)
#Run DeSeq function,
dds_og <- DESeq(dds)
dds <- dds_og
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds) >= 5) >= (ncol(dds) / 4)
dds <- dds[keep, ]
dds
all_zero_genes <- rownames(mat_filtered)[rowSums(mat_filtered != 0) == 0]
if (length(all_zero_genes) == 0) {
cat("All genes have at least one non-zero value.\n")
} else {
cat("Some genes are all zeros:\n")
print(all_zero_genes)
}
num_nonzero_genes <- sum(rowSums(mat_filtered != 0) > 0)
num_nonzero_genes
if (length(all_zero_genes) == 0) {
cat("All genes have at least one non-zero value.\n")
} else {
cat("Some genes are all zeros:\n")
print(all_zero_genes)
}
mat_filtered
rownames(mat_filtered)
rownames(mat)
length(all_de_genes)
unique(all_de_genes)
unique(sort(all_de_genes))
# 2: Extract expression matrix
mat <- assay(vst_data)
mat <- mat[rownames(mat) %in% all_de_genes, ]
rownames(mat)
saveRDS(dds_og, file = "/home/darrian/Documents/RNA_seq_fescue/r_data/dds.rds")
# Loading in Meta Data
metadata_loc <-"/home/darrian/Documents/RNA_seq_fescue/r_data/metadata_match_to_FeatureCounts.txt"
meta_data <- read.table(metadata_loc)
# Loading in Feature Counts
Featurecount <- read.table(Featurecount_loc, header = TRUE)
Featurecount <- Featurecount[, colnames(Featurecount) %in% meta_data$SampleName]
ncol(Featurecount)
nrow(meta_data)
#Load in the list of DEGs
all_de_genes <- readRDS("/home/darrian/Documents/RNA_seq_fescue/r_data/all_de_genes.rds")
dds <- readRDS("/home/darrian/Documents/RNA_seq_fescue/r_data/dds.rds")
label_results <- readRDS("/home/darrian/Documents/RNA_seq_fescue/r_data/label_results")
# 1: Transform counts
vst_data <- vst(dds)
# 2: Extract expression matrix
mat <- assay(vst_data)
mat <- mat[rownames(mat) %in% all_de_genes, ]
# 3: Ordering the data
metadata_ordered <- meta[match(colnames(mat), meta$SampleName), ]
if(any(is.na(metadata_ordered$SampleName))){
stop("Some samples in the matrix do not have matching metadata!")
}
# 4: Build a sorting key (Genotype → HarvestTime → Treatment → Endophyte)
metadata_ordered <- metadata_ordered %>%
arrange(Genotype, HarvestTime, Treatment, Endophyte)
# 5: Reorder the matrix columns according to this sort
mat <- mat[, metadata_ordered$SampleName]
nrow(mat)
# 6: Create annotation data frame for pheatmap
annotation_col <- metadata_ordered[, c("Genotype", "HarvestTime", "Treatment", "Endophyte")]
rownames(annotation_col) <- metadata_ordered$SampleName
# 7: Graph it
breaks <- c(
seq(0, 5, length.out = 50),     # blue → yellow
seq(5.01, 10, length.out = 50), # yellow → orange
seq(10.01, 15, length.out = 50) # orange → red
)
# Generate the same number of colors - 1
my_colors <- colorRampPalette(c("blue", "yellow", "orange", "red"))(length(breaks) - 1)
# Plot
p <- pheatmap(
mat,
annotation_col = annotation_col,
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE,
border_color = "black",
color = my_colors,
breaks = breaks
)
# Wrap heatmap in gtable
heatmap_grob <- p$gtable
# Create text grobs
y_label <- textGrob("Samples", rot=90, gp=gpar(fontsize=14))
x_label <- textGrob("Genes", gp = gpar(fontsize = 14),hjust = 0.5, x = unit(0.4, "npc")
)
# Arrange using layout_matrix
layout_mat <- rbind(
c(NA, 1),  # Top row: NA on left, X label on right
c(2, 3)    # Bottom row: Y label on left, heatmap on right
)
heat <- grid.arrange(
x_label,    # index 1 in layout
y_label,    # index 2
heatmap_grob, # index 3
layout_matrix = layout_mat,
widths = c(1, 8), heights = c(1, 8)
)
ggsave(heat,file ="4d_Normalized_count_heatmap.png", width = 10, height = 10, dpi = 300 )
# Step 1: Find the group of each sample
sample_to_group <- sapply(colnames(mat), function(samp) {
# Genotype
geno <- str_extract(samp, "^CTE\\d+")
# Harvest time
harvest_code <- str_extract(samp, "O\\d+|J\\d+")
harvest <- case_when(
harvest_code == "O17" ~ "October_2017",
harvest_code == "O16" ~ "October_2016",
harvest_code == "J16" ~ "June_2016",
harvest_code == "J17" ~ "June_2017",
TRUE ~ harvest_code
)
# Treatment (C, H, HP) – fixed
parts <- str_split(samp, "_")[[1]]
treat_code <- str_extract(parts[3], "HP|H|C")
treat <- case_when(
treat_code == "HP" ~ "HeatxPercipitation",
treat_code == "H"  ~ "Heat",
treat_code == "C"  ~ "Control",
TRUE ~ "Other"
)
paste(geno, harvest, treat, sep = "_")
})
# Make a copy of mat to modify
mat_filtered <- mat
# Loop over samples
for (samp in colnames(mat_filtered)) {
group <- sample_to_group[samp]           # get the group for this sample
deg_genes <- names(label_results[[group]])    # genes that are DEGs in this group
# Set expression to 0 for genes not in deg_genes
mat_filtered[!rownames(mat_filtered) %in% deg_genes, samp] <- 0
}
breaks <- c(
seq(0, .1, length.out = 50),     # blue → yellow
seq(.2, 5, length.out = 50), # yellow → orange
seq(5.1, 10, length.out = 50) # orange → red
)
# Generate the same number of colors - 1
my_colors <- colorRampPalette(c("blue", "yellow", "orange", "red"))(length(breaks) - 1)
p <- pheatmap(
mat_filtered,
annotation_col = annotation_col,
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE,
border_color = "black",
color = my_colors,
breaks = breaks
)
# Wrap heatmap in gtable
heatmap_grob <- p$gtable
# Create text grobs
y_label <- textGrob("Samples", rot=90, gp=gpar(fontsize=14))
x_label <- textGrob("Genes", gp = gpar(fontsize = 14),hjust = 0.5, x = unit(0.4, "npc")
)
# Arrange using layout_matrix
layout_mat <- rbind(
c(NA, 1),  # Top row: NA on left, X label on right
c(2, 3)    # Bottom row: Y label on left, heatmap on right
)
heat2 <- grid.arrange(
x_label,    # index 1 in layout
y_label,    # index 2
heatmap_grob, # index 3
layout_matrix = layout_mat,
widths = c(1, 8), heights = c(1, 8)
)
ggsave(heat2,file ="4d_Normalized_count_heatmap_2.png", width = 10, height = 10, dpi = 300 )
