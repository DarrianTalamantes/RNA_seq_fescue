# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count
gene_counts[[paste0(treatment, "_Down")]] <- down_count
}
# View final table
head(gene_counts)
ncol(Featurecount)
nrow(metadata)
results(results_list_CloneXHTxTreat$CTE46_October_2016_HeatxPercipitation)
#### Creating lists of different sample groups to look at
names(results_list_CloneXHTxTreat)
results_list_CloneXHTxTreat
names(results_list_CloneXHTxTreat)
group_keys <- sub("^(CTE\\d+)_.*_([^_]+)$", "\\1_\\2", all_names)
group_keys
# Split into groups
grouped_indices <- split(seq_along(nms), group_keys)
# Split into groups
grouped_indices <- split(seq_along(all_names), group_keys)
grouped_indices
# If you want the actual names in each group
grouped_names <- split(all_names, group_keys)
grouped_names
names_by_geno_treat <- split(all_names, group_keys)
names_by_geno_treat
#View by treatment
length(names_by_geno_treat$CTE25_Control)
length(names_by_geno_treat$CTE46_Heat)
for (key in names(results_list_CloneXHTxTreat)) {
dds <- results_list_CloneXHTxTreat[[key]]
tryCatch({
res <- results(dds, contrast = c("Endophyte", "Positive", "Negative"))
res_df <- as.data.frame(res)
res_df$Gene <- rownames(res_df)
res_df$Label <- "FALSE"
res_df$Label[res_df$padj < 0.05 & res_df$log2FoldChange >= 1.5] <- "Upregulated"
res_df$Label[res_df$padj < 0.05 & res_df$log2FoldChange <= -1.5] <- "Downregulated"
# Store as named vector
label_vec <- setNames(res_df$Label, res_df$Gene)
label_results[[key]] <- label_vec
}, error = function(e) {
message("Error processing ", key, ": ", e$message)
})
}
# Step 2: Get all unique gene names
all_genes <- unique(unlist(lapply(label_results, names)))
# Step 3: Initialize empty data frame
summary_df <- data.frame(Gene = all_genes, stringsAsFactors = FALSE)
# Step 4: Fill in each column with labels
for (key in names(label_results)) {
vec <- label_results[[key]]
# Match to all_genes, fill with FALSE where not present
summary_df[[key]] <- vec[summary_df$Gene]
summary_df[[key]][is.na(summary_df[[key]])] <- "FALSE"
}
label_results
summary_df
head(names_by_geno_treat)
treatment_lists <- list(
Heat = names_by_treatment$Heat,
Control = names_by_treatment$Control,
HeatxPercipitation = names_by_treatment$HeatxPercipitation,
CTE25 = names_by_clones$CTE25,
CTE31 = names_by_clones$CTE31,
CTE45 = names_by_clones$CTE45,
CTE46 = names_by_clones$CTE46
# Add more if needed
)
treatment_lists
names_by_geno_treat
#### This seperates the data into the groups and counts up the up and down
#### regulated genes by group.
# Create an output data frame to store counts
gene_counts <- data.frame(Gene = summary_df$Gene, stringsAsFactors = FALSE)
# Loop through treatments
for (treatment in names(names_by_geno_treat)) {
samples <- names_by_geno_treat[[treatment]]
# Ensure samples exist in summary_df
samples <- intersect(samples, colnames(summary_df))
print(length(samples))
if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count
gene_counts[[paste0(treatment, "_Down")]] <- down_count
}
# View final table
head(gene_counts)
View(gene_counts)
#### This seperates the data into the groups and counts up the up and down
#### regulated genes by group.
# Create an output data frame to store counts
gene_counts <- data.frame(Gene = summary_df$Gene, stringsAsFactors = FALSE)
# Loop through treatments
for (treatment in names(names_by_geno_treat)) {
samples <- names_by_geno_treat[[treatment]]
# Ensure samples exist in summary_df
samples <- intersect(samples, colnames(summary_df))
print(length(samples))
if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
deg_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated" | x == "Upregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count
gene_counts[[paste0(treatment, "_Down")]] <- down_count
gene_counts[[paste0(treatment, "_DEGs")]] <- deg_count
}
# View final table
head(gene_counts)
# View final table
head(gene_counts)
gene_counts[ , grep("DEGs$", colnames(gene_counts))]
gene_counts_DEGs <- gene_counts[ , grep("DEGs$", colnames(gene_counts))]
gene_counts_DEGs
colnames(gene_counts_DEGs
)
rownames(gene_counts_DEGs)
summary_df
rownames(gene_counts_DEGs) <- summary_df$Gene
gene_counts_DEGs
gene_count_DEGs_mat <- as.matrix(gene_counts_DEGs)
gene_count_DEGs_mat
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
gene_counts_DEGs <- gene_counts[ , grep("DEGs$", colnames(gene_counts))]
rownames(gene_counts_DEGs) <- summary_df$Gene
gene_counts_DEGs <- gene_counts_DEGs[rowSums(gene_counts_DEGs) != 0, ]
gene_count_DEGs_mat <- as.matrix(gene_counts_DEGs)
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "DEG Heatmap: Up/Downregulated"
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "DEG Heatmap: Up/Downregulated",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
# order by genotype
genotype <- sub("^(CTE\\d+)_.*$", "\\1", colnames(subset_gene_counts))
order_idx <- order(genotype)
gene_count_DEGs_genoorder <- gene_counts_DEGs[ , order_idx]
# order by genotype
genotype <- sub("^(CTE\\d+)_.*$", "\\1", colnames(gene_counts_DEGs))
order_idx <- order(genotype)
gene_count_DEGs_genoorder <- gene_counts_DEGs[ , order_idx]
gene_count_DEGs_genoorder_mat <- as.matrix(gene_count_DEGs_genoorder)
pheatmap(gene_count_DEGs_treatorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
treatment <- sub("^.*?_(.*?)_DEGs$", "\\1", colnames(gene_counts_DEGs))
order_idx <- order(treatment)
gene_count_DEGs_treatorder <- gene_counts_DEGs[ , order_idx]
gene_count_DEGs_treatorder_mat <- as.matrix(gene_count_DEGs_treatorder)
pheatmap(gene_count_DEGs_treatorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_genoorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_treatorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment (Treatment Order)",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_genoorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment (Genotype Order)",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
library(tidyverse)
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
library(tidyverse)
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts_loc <- "/home/darrian/Documents/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts <- protein_counts %>%
filter(Unique_Value != "-")
protein_counts <- protein_counts %>%
filter(Unique_Value != "consensus disorder prediction")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a horizontal bar graph with ggplot
p <- ggplot(top_10, aes(y = reorder(Unique_Value, .data[[column_name]]),
x = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
y = "Proteins",
x = "Sequences Detected") +
theme_bw() +
scale_x_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 20),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(size = 12),                         # Increased x-axis label size
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "black")
# HP x Heat
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E-: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
# Heat: E- x E+
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_upregulated", Graph_Title = "Heat: E+ x E-: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_downregulated", Graph_Title = "Heat: E+ x E-: Downregulated", color = "steelblue", endo_color = "black")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
library(gridExtra)
grid.arrange(a1, a2, ncol = 1)
# HP vs Control
a1 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
b1 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
a2 <- create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
b2 <- create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
grid.arrange(a1, a2, ncol = 1)
grid.arrange(b1, b2, ncol = 1)
View(protein_counts)
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HeatxControl_significantly_upregulated", Graph_Title = "E-: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# HP x Heat
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E-: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
# Heat: E- x E+
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_upregulated", Graph_Title = "Heat: E+ x E-: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_downregulated", Graph_Title = "Heat: E+ x E-: Downregulated", color = "steelblue", endo_color = "black")
grid.arrange(a1, a2, ncol = 1)
grid.arrange(b1, b2, ncol = 1)
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
c1 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
c2 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
grid.arrange(c1, c2, ncol = 1)
# This is R script used to create better graphs that analyze gene expression directly than those in 2a
# Because I only use harvest time in later analysis I drop month and year here in favor of only HravestTime
# Auther: Darrian Talamantes
# Notes:
# Before starting this script I deleted the suffix within the feature counts table
# Install Bioconductor if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(tidyverse)
library(grid)
library(data.table)
library(pheatmap)
library(variancePartition)
library(BiocGenerics)
library(lme4)
library(gridExtra)
# install.packages("unix")
# Increase memory of R to 12 GB
memory.limit(size=12000)  #Might not need. Memory should not be capped in newer R versions
# File locations
data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
Featurecount <- read.table(Featurecount_loc, header = TRUE)
###############################
# Fixing data
###############################
# Featurecount$feature <- rownames(Featurecount)
# # Move the new column to the first position
# Featurecount <- Featurecount[, c("feature", setdiff(names(Featurecount), "feature"))]
# Creating the MetaData
IDs <- colnames(Featurecount)
IDs <- as.data.frame(IDs)
IDs <- IDs[-1, ]
# write.csv(IDs,"featurenames.txt",row.names = FALSE)
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Genotype = str_extract(SampleName, "CTE\\d+"),
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode %in% c("J16", "J17") ~ "June",
HarvestCode %in% c("O16", "O17") ~ "October",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "J16" ~ "2016",
HarvestCode == "O16" ~ "2016",
HarvestCode == "J17" ~ "2017",
HarvestCode == "O17" ~ "2017",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('HP'='HeatxPercipitation','H'='Heat', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
rep_str3 = c('Heateat'='Heat')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str3)
metadata <- subset(metadata, select = -c(HarvestCode))
Featurecount <- Featurecount[, colnames(Featurecount) %in% metadata$SampleName]
ncol(Featurecount)
nrow(metadata)
###############################
# Running DeSeq2
###############################
#Makes DeSeq data set
dds <- DESeqDataSetFromMatrix(countData = Featurecount,
colData = metadata,
design= ~ Genotype + HarvestTime + Endophyte + Treatment)
#Run DeSeq function,
dds_og <- DESeq(dds)
dds <- dds_og
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds) >= 5) >= (ncol(dds) / 4)
dds <- dds[keep, ]
####################################
# Function to get results.
####################################
get_results <- function(DeSeqData,column,t1,t2){
if(!is.character(column) || !is.character(t1) || !is.character(t2)) {
stop("The column and treatment levels (t1, t2) must be provided as strings.")
}
output <- results(DeSeqData, contrast = c(column, t1, t2))
output <- output[order(output$padj),]
return(output)
}
###################################
# Heat maps
###################################
########## Variation caused by Treatments on all data  #########################
# 1. Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# 4. Create annotation for columns
ann_col <- data.frame(Genotype = metadata$Genotype)
rownames(ann_col) <- metadata$SampleName
# 5. Plot with pheatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",              # normalize rows for better visual
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = FALSE,
main = "Top 50 DEGs")
# Redo but with endophyte status
# 4. Create annotation for columns
ann_col <- data.frame(Endophyte = metadata$Endophyte)
rownames(ann_col) <- metadata$SampleName
# 5. Plot with pheatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",              # normalize rows for better visual
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = FALSE,
main = "Top 50 DEGs")
# Redo one more time but with Time Point
# 4. Create annotation for columns
ann_col <- data.frame("Harvest Time" = metadata$HarvestTime)
rownames(ann_col) <- metadata$SampleName
# 5. Plot with pheatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",              # normalize rows for better visual
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = FALSE,
main = "Top 50 DEGs")
# Basic PCA Plots
geno <- plotPCA(vsd, intgroup = "Genotype")
HT <- plotPCA(vsd, intgroup = "HarvestTime")
treatment <- plotPCA(vsd, intgroup = "Treatment")
Endo <- plotPCA(vsd, intgroup = "Endophyte")
pca1 <- geno + labs(color = "Genotype") + theme_bw()
pca2 <- HT + labs(color = "Harvest Time") + theme_bw()
pca3 <- treatment + labs(color = "Treatment") + theme_bw()
pca4 <- Endo + labs(color = "Endophyte Status") + theme_bw()
grid.arrange(pca1, pca2, pca3, pca4, ncol = 2)
# Finding the variance of all varaibles
meta <- as.data.frame(colData(dds))
form <- ~ (1|Genotype) + (1|Treatment) + (1|HarvestTime) + (1|Endophyte)
varPart <- fitExtractVarPartModel(vsd_mat, form, meta)
varPart_reordered <- varPart[, c("Genotype", "HarvestTime", "Treatment", "Endophyte", "Residuals")]
p <- plotVarPart(varPart_reordered)
avg_var_explained <- colMeans(varPart_reordered)
print(avg_var_explained)
avg_df <- enframe(avg_var_explained, name = "Variable", value = "AvgVariance")
p +
geom_text(data = avg_df, aes(x = Variable, y = AvgVariance + 2, label = round(AvgVariance, 3)),
inherit.aes = FALSE, vjust = -35, size = 3.5,)
