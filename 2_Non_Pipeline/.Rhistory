color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
treatment <- sub("^.*?_(.*?)_DEGs$", "\\1", colnames(gene_counts_DEGs))
order_idx <- order(treatment)
gene_count_DEGs_treatorder <- gene_counts_DEGs[ , order_idx]
gene_count_DEGs_treatorder_mat <- as.matrix(gene_count_DEGs_treatorder)
pheatmap(gene_count_DEGs_treatorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_genoorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_treatorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment (Treatment Order)",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(gene_count_DEGs_genoorder_mat,
scale = "row",           # scale each gene across samples
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = FALSE,
main = "Heatmap of DEG Count Within Same Genotype and Treatment (Genotype Order)",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
library(tidyverse)
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
library(tidyverse)
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts_loc <- "/home/darrian/Documents/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts <- protein_counts %>%
filter(Unique_Value != "-")
protein_counts <- protein_counts %>%
filter(Unique_Value != "consensus disorder prediction")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a horizontal bar graph with ggplot
p <- ggplot(top_10, aes(y = reorder(Unique_Value, .data[[column_name]]),
x = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
y = "Proteins",
x = "Sequences Detected") +
theme_bw() +
scale_x_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 20),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(size = 12),                         # Increased x-axis label size
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "black")
# HP x Heat
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E-: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
# Heat: E- x E+
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_upregulated", Graph_Title = "Heat: E+ x E-: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_downregulated", Graph_Title = "Heat: E+ x E-: Downregulated", color = "steelblue", endo_color = "black")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
library(gridExtra)
grid.arrange(a1, a2, ncol = 1)
# HP vs Control
a1 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
b1 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
a2 <- create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
b2 <- create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
grid.arrange(a1, a2, ncol = 1)
grid.arrange(b1, b2, ncol = 1)
View(protein_counts)
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HeatxControl_significantly_upregulated", Graph_Title = "E-: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# HP x Heat
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E-: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Heat with Percipitation: Upregulated", color = "firebrick1", endo_color = "black")
# Heat: E- x E+
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_upregulated", Graph_Title = "Heat: E+ x E-: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_downregulated", Graph_Title = "Heat: E+ x E-: Downregulated", color = "steelblue", endo_color = "black")
grid.arrange(a1, a2, ncol = 1)
grid.arrange(b1, b2, ncol = 1)
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
c1 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
c2 <- create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
grid.arrange(c1, c2, ncol = 1)
# This is R script used to create better graphs that analyze gene expression directly than those in 2a
# Because I only use harvest time in later analysis I drop month and year here in favor of only HravestTime
# Auther: Darrian Talamantes
# Notes:
# Before starting this script I deleted the suffix within the feature counts table
# Install Bioconductor if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(tidyverse)
library(grid)
library(data.table)
library(pheatmap)
library(variancePartition)
library(BiocGenerics)
library(lme4)
library(gridExtra)
# install.packages("unix")
# Increase memory of R to 12 GB
memory.limit(size=12000)  #Might not need. Memory should not be capped in newer R versions
# File locations
data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
Featurecount <- read.table(Featurecount_loc, header = TRUE)
###############################
# Fixing data
###############################
# Featurecount$feature <- rownames(Featurecount)
# # Move the new column to the first position
# Featurecount <- Featurecount[, c("feature", setdiff(names(Featurecount), "feature"))]
# Creating the MetaData
IDs <- colnames(Featurecount)
IDs <- as.data.frame(IDs)
IDs <- IDs[-1, ]
# write.csv(IDs,"featurenames.txt",row.names = FALSE)
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Genotype = str_extract(SampleName, "CTE\\d+"),
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode %in% c("J16", "J17") ~ "June",
HarvestCode %in% c("O16", "O17") ~ "October",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "J16" ~ "2016",
HarvestCode == "O16" ~ "2016",
HarvestCode == "J17" ~ "2017",
HarvestCode == "O17" ~ "2017",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('HP'='HeatxPercipitation','H'='Heat', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
rep_str3 = c('Heateat'='Heat')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str3)
metadata <- subset(metadata, select = -c(HarvestCode))
Featurecount <- Featurecount[, colnames(Featurecount) %in% metadata$SampleName]
ncol(Featurecount)
nrow(metadata)
###############################
# Running DeSeq2
###############################
#Makes DeSeq data set
dds <- DESeqDataSetFromMatrix(countData = Featurecount,
colData = metadata,
design= ~ Genotype + HarvestTime + Endophyte + Treatment)
#Run DeSeq function,
dds_og <- DESeq(dds)
dds <- dds_og
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds) >= 5) >= (ncol(dds) / 4)
dds <- dds[keep, ]
####################################
# Function to get results.
####################################
get_results <- function(DeSeqData,column,t1,t2){
if(!is.character(column) || !is.character(t1) || !is.character(t2)) {
stop("The column and treatment levels (t1, t2) must be provided as strings.")
}
output <- results(DeSeqData, contrast = c(column, t1, t2))
output <- output[order(output$padj),]
return(output)
}
###################################
# Heat maps
###################################
########## Variation caused by Treatments on all data  #########################
# 1. Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# 4. Create annotation for columns
ann_col <- data.frame(Genotype = metadata$Genotype)
rownames(ann_col) <- metadata$SampleName
# 5. Plot with pheatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",              # normalize rows for better visual
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = FALSE,
main = "Top 50 DEGs")
# Redo but with endophyte status
# 4. Create annotation for columns
ann_col <- data.frame(Endophyte = metadata$Endophyte)
rownames(ann_col) <- metadata$SampleName
# 5. Plot with pheatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",              # normalize rows for better visual
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = FALSE,
main = "Top 50 DEGs")
# Redo one more time but with Time Point
# 4. Create annotation for columns
ann_col <- data.frame("Harvest Time" = metadata$HarvestTime)
rownames(ann_col) <- metadata$SampleName
# 5. Plot with pheatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",              # normalize rows for better visual
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = FALSE,
main = "Top 50 DEGs")
# Basic PCA Plots
geno <- plotPCA(vsd, intgroup = "Genotype")
HT <- plotPCA(vsd, intgroup = "HarvestTime")
treatment <- plotPCA(vsd, intgroup = "Treatment")
Endo <- plotPCA(vsd, intgroup = "Endophyte")
pca1 <- geno + labs(color = "Genotype") + theme_bw()
pca2 <- HT + labs(color = "Harvest Time") + theme_bw()
pca3 <- treatment + labs(color = "Treatment") + theme_bw()
pca4 <- Endo + labs(color = "Endophyte Status") + theme_bw()
grid.arrange(pca1, pca2, pca3, pca4, ncol = 2)
# Finding the variance of all varaibles
meta <- as.data.frame(colData(dds))
form <- ~ (1|Genotype) + (1|Treatment) + (1|HarvestTime) + (1|Endophyte)
varPart <- fitExtractVarPartModel(vsd_mat, form, meta)
varPart_reordered <- varPart[, c("Genotype", "HarvestTime", "Treatment", "Endophyte", "Residuals")]
p <- plotVarPart(varPart_reordered)
avg_var_explained <- colMeans(varPart_reordered)
print(avg_var_explained)
avg_df <- enframe(avg_var_explained, name = "Variable", value = "AvgVariance")
p +
geom_text(data = avg_df, aes(x = Variable, y = AvgVariance + 2, label = round(AvgVariance, 3)),
inherit.aes = FALSE, vjust = -35, size = 3.5,)
# Author: Darrian Talamantes
# This script will use the gene counts made in 2c from the partitioned data "results_list_CloneXHTxTreat"
# with the contrast of E+ and E-. These counts are then used to make various different upset plots.
# split by treatment or genotype, then up and down regulated. or simply all DEGs counted up
# Install Bioconductor if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(tidyverse)
library(grid)
library(data.table)
library(pheatmap)
library(ComplexUpset)
library(cowplot)
# File locations
data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
# Data recreation from previous plot
gene_counts = read.csv(paste0(data_folder, "/Epos_Eneg_Deseq2_contrast.csv"), header = TRUE) # from 2c
################################################################################
# Huge function that creates 4 data sets
# CTE all DEGs, CTE up or down regulated DEG count
# Treatments all DEGs, Treatments up or down regulated DEG count.
################################################################################
data_splitter <- function(GeneCount = gene_counts, cutoff = 2)
{
# Prepare base data
rownames(GeneCount) <- GeneCount$Gene
data_only <- GeneCount[, -1]
#### Subset per genotype first  ####
cte_up <- data_only[, c("CTE25_Up", "CTE31_Up", "CTE45_Up", "CTE46_Up")]
cte_down <- data_only[, c("CTE25_Down", "CTE31_Down", "CTE45_Down", "CTE46_Down")]
# Now filter genes for CTE Up/Down separately
cte_up_genes <- rownames(cte_up)[rowSums(cte_up >= cutoff) > 0]
cte_down_genes <- rownames(cte_down)[rowSums(cte_down >= cutoff) > 0]
cte_genes <- unique(c(cte_up_genes, cte_down_genes))
# Subset just those genes
cte_up_subset <- cte_up[cte_genes, , drop = FALSE]
cte_down_subset <- cte_down[cte_genes, , drop = FALSE]
# Convert rownames to Gene column for merging
cte_up_subset$Gene <- rownames(cte_up_subset)
cte_down_subset$Gene <- rownames(cte_down_subset)
# Merge the two on Gene
final_CTE_Up_Down <- merge(cte_up_subset, cte_down_subset, by = "Gene", all = TRUE)
# Restore rownames and reorder columns
rownames(final_CTE_Up_Down) <- final_CTE_Up_Down$Gene
final_CTE_Up_Down$Gene <- NULL
#### Repeat for Treatment  ####
treat_up <- data_only[, c("Heat_Up", "Control_Up", "HeatxPercipitation_Up")]
treat_down <- data_only[, c("Heat_Down", "Control_Down", "HeatxPercipitation_Down")]
# Identify genes to retain
treat_up_genes <- rownames(treat_up)[rowSums(treat_up >= cutoff) > 0]
treat_down_genes <- rownames(treat_down)[rowSums(treat_down >= cutoff) > 0]
treat_genes <- unique(c(treat_up_genes, treat_down_genes))
# Subset the relevant genes
treat_up_subset <- treat_up[treat_genes, , drop = FALSE]
treat_down_subset <- treat_down[treat_genes, , drop = FALSE]
# Add Gene column for merge
treat_up_subset$Gene <- rownames(treat_up_subset)
treat_down_subset$Gene <- rownames(treat_down_subset)
# Merge by gene
final_Treats_Up_Down <- merge(treat_up_subset, treat_down_subset, by = "Gene", all = TRUE)
# Restore rownames and reorder
rownames(final_Treats_Up_Down) <- final_Treats_Up_Down$Gene
final_Treats_Up_Down$Gene <- NULL
#### This will combine the up and down for count of all DEGs  ####
ids <- unique(sub("_.*", "", colnames(data_only)))
sums <- list()
for (cte in ids) {
cols <- grep(paste0("^", cte, "_"), colnames(data_only), value = TRUE)
message("Working on ", cte, " using columns: ", paste(cols, collapse = ", "))
if (length(cols) > 0) {
sums[[cte]] <- rowSums(data_only[, cols, drop = FALSE])
} else {
warning("No columns found for ", cte)
}
}
final_DEGs <- as.data.frame(sums)
rownames(final_DEGs) <- rownames(data_only)
total_degs_genos <- subset(final_DEGs, select = c ("CTE25", "CTE31", "CTE45", "CTE46"))
total_degs_treatments <- subset(final_DEGs, select = c ("Heat", "Control", "HeatxPercipitation"))
# Filteres out any genes that are not found to have a count of 2 in at least 1 group
top_genes_list2 <- apply(total_degs_genos, 2, function(col) {
filtered_col <- col[col >= cutoff]
})
total_degs_genos$Gene <- rownames(total_degs_genos)
# Combine all top gene names into one unique set
top_genes_unique2 <- unique(unlist(lapply(top_genes_list2, names)))
# Subset the original table with only those genes
total_degs_genos <- total_degs_genos[total_degs_genos$Gene %in% top_genes_unique2, ]
total_degs_genos$Gene <- NULL
# Filteres out any genes that are not found to have a count of 2 in at least 1 group
top_genes_list3 <- apply(total_degs_treatments, 2, function(col) {
filtered_col <- col[col >= cutoff]
})
total_degs_treatments$Gene <- rownames(total_degs_treatments)
# Combine all top gene names into one unique set
top_genes_unique3 <- unique(unlist(lapply(top_genes_list3, names)))
# Subset the original table with only those genes
total_degs_treatments <- total_degs_treatments[total_degs_treatments$Gene %in% top_genes_unique3, ]
total_degs_treatments$Gene <- NULL
return(list(
final_CTE_Up_Down = final_CTE_Up_Down,
final_Treats_Up_Down = final_Treats_Up_Down,
total_degs_genos = total_degs_genos,
total_degs_treatments = total_degs_treatments
))
}
################################################################################
# Function to get data ready for upset plot and to make upset plot
################################################################################
# Binary data for upset plot
upsetter <- function(dataframe, title_name = "DEFAULT TITLE"){
binary_df <- dataframe %>%
rownames_to_column(var = "Gene") %>%
mutate(across(-Gene, ~ ifelse(. != 0, 1, 0)))
plot1 <- upset(binary_df,
intersect = colnames(binary_df)[-which(names(binary_df) == "Gene")],
name = "Unique Genes",
base_annotations = list('Intersection size' = intersection_size())) +
labs(title = title_name)
return(plot1)
}
binary_data <- function(dataframe){
binary_df <- dataframe %>%
rownames_to_column(var = "Gene") %>%
mutate(across(-Gene, ~ ifelse(. != 0, 1, 0)))
return(binary_df)
}
#######################
# Using the functions
#######################
all_counts <- data_splitter(gene_counts, 2)
upsetter(all_counts$final_CTE_Up_Down, "E+ and E- DEGs by Genotype")
upsetter(all_counts$final_Treats_Up_Down, "E+ and E- DEGs by Treatment")
p1 <- upsetter(all_counts$total_degs_genos, "E+ and E- DEGs by Genotype")
p2 <- upsetter(all_counts$total_degs_treatments, "E+ and E- DEGs by Treatment")
plot_grid(p1, p2, labels = c("A", "B"), ncol = 1, align = "v")
plot_grid(p2, p1, labels = c("A", "B"), ncol = 1, align = "v")
View(all_counts)
all_counts$total_degs_treatments
heat.heatxpercipitation <- all_counts$total_degs_treatments %>%
filter(Heat != 0 & HeatxPercipitation != 0)
heat.heatxpercipitation
ncol(heat.heatxpercipitation)
nrow(heat.heatxpercipitation)
heat.heatxpercipitation <- all_counts$total_degs_treatments %>%
filter(Heat >= 2 & HeatxPercipitation >= 2)
nrow(heat.heatxpercipitation)
heat.heatxpercipitation
heat.heatxpercipitation <- all_counts$total_degs_treatments %>%
filter(Heat >= 2 & HeatxPercipitation >= 2 & Control == 0)
nrow(heat.heatxpercipitation)
heat.heatxpercipitation <- all_counts$total_degs_treatments %>%
filter(Heat >= 1 & HeatxPercipitation >= 1 & Control == 0)
nrow(heat.heatxpercipitation)
heat.heatxpercipitation
heat.heatxpercipitation
row.names(heat.heatxpercipitation)
genes.shared.heat.heatxp <- row.names(heat.heatxpercipitation)
save(genes.shared.heat.heatxp,file="/home/darrian/Documents/RNA_seq_fescue/Goatools_data/genes.shared_heatxheatpercipitation.txt")
save(genes.shared.heat.heatxp,file="/home/darrian/Documents/RNA_seq_fescue/Gene_lists/genes.shared_heatxheatpercipitation.txt")
genes.shared.heat.heatxp <- sa.dataframe(row.names(heat.heatxpercipitation))
genes.shared.heat.heatxp <- as.dataframe(row.names(heat.heatxpercipitation))
genes.shared.heat.heatxp <- row.names(heat.heatxpercipitation)
genes_df <- data.frame(gene_id = genes.shared.heat.heatxp)
write.csv(genes_df, "/home/darrian/Documents/RNA_seq_fescue/Gene_lists/shared_genes_heat_heatxpercipitation.txt", row.names = FALSE)
write.csv(genes_df, "/home/darrian/Documents/RNA_seq_fescue/Gene_lists/shared_genes_heat_heatxpercipitation.txt",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
write.csv(genes_df, "/home/darrian/Documents/RNA_seq_fescue/Gene_lists/shared_genes_heat_heatxpercipitation.txt",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
genes_df <- data.frame(gene_id = genes.shared.heat.heatxp)
write.csv(genes_df, "/home/darrian/Documents/RNA_seq_fescue/Gene_lists/shared_genes_heat_heatxpercipitation.txt",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
write.table(genes_df, "/home/darrian/Documents/RNA_seq_fescue/Gene_lists/shared_genes_heat_heatxpercipitation.txt",
row.names = FALSE,
col.names = FALSE,
quote = FALSE)
