print(volcano_plot_EndoPos_HeatxControl)
combined_plot1 <- ggarrange(volcano_plot_EndoNeg_HeatxControl, separator, volcano_plot_EndoPos_HeatxControl, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot1, top = text_grob("Heat x Control Volcano Plots", face = "bold", size = 14))
# HeatxPresipitation x control
volcano_plot_EndoPos_HPxControl <- create_volcano_plot(EndoPos_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Posititve, Heat x Control")
print(volcano_plot_EndoPos_HPxControl)
volcano_plot_EndoNeg_HPxControl <- create_volcano_plot(EndoNeg_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Negative, Heat x Control")
print(volcano_plot_EndoNeg_HPxControl)
combined_plot2 <- ggarrange(volcano_plot_EndoNeg_HPxControl, separator, volcano_plot_EndoPos_HPxControl, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot2, top = text_grob("Heat with Percipitation x Control Volcano Plots", face = "bold", size = 14))
# HeatxPresipitation x Heat
volcano_plot_EndoPos_HPxHeat <- create_volcano_plot(EndoPos_HPxHeat, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Positive, Heat with Percipitation x Heat")
print(volcano_plot_EndoPos_HPxHeat)
volcano_plot_EndoNeg_HPxHeat <- create_volcano_plot(EndoNeg_HPxHeat, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Negative, Heat with Percipitation x Heat")
print(volcano_plot_EndoNeg_HPxHeat)
combined_plot3 <- ggarrange(volcano_plot_EndoNeg_HPxHeat, separator, volcano_plot_EndoPos_HPxHeat, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot3, top = text_grob("Heat with Percipitation x Heat Volcano Plots", face = "bold", size = 14))
# Treatments, Negative x Positive
volcano_plot_Heat_NegxPos <- create_volcano_plot(Heat_NegxPos, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Heat treatment, Endo Negative x Positive")
print(volcano_plot_Heat_NegxPos)
volcano_plot_HP_NegxPos <- create_volcano_plot(PxH_NegxPos, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Heat with Percipitation, Endo Negactive x Positive")
print(volcano_plot_HP_NegxPos)
volcano_plot_Control_NegxPos <- create_volcano_plot(Control_NegxPos, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Control, Endo Negactive x Positive")
print(volcano_plot_Control_NegxPos)
combined_plot4 <- ggarrange(volcano_plot_Heat_NegxPos, separator, volcano_plot_HP_NegxPos, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot4, top = text_grob("Treatments by Endophyte Status", face = "bold", size = 14))
head(EndoPos_HPxHeat)
head(EndoPos_HPxHeat)
head(20,EndoPos_HPxHeat)
head(EndoPos_HPxHeat,20)
comparison_list
head(EndoNeg_HeatxControl)
# FUnction currently incomplete. Currently only stops the function from running if there is no log2 and pvalue columns (probs useless)
# Im thinking we edit this. It should use a pvalue table and a log2 table. Then use the respective thresholds on each
find_significance <- function(results, saved_df, log2FC_threshold = 2, pvalue_threshold = 0.05) {
# Ensure the results have the required columns
if(!all(c("log2FoldChange", "padj") %in% colnames(results))) {
stop("Results must contain 'log2FoldChange' and 'padj' columns.")
}
# Create a column to indicate significance
results$significance <- "Not Significant"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange > log2FC_threshold] <- "Significant Upregulated"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange < (log2FC_threshold * -1)] <- "Significant Downregulated"
saved_df[[results]][results$significance %in% c("Significant Upregulated")] <- 1
saved_df[[results]][results$significance %in% c("Significant Downregulated")] <- -1
return(saved_df)
}
significant_table <- find_significance(EndoNeg_HeatxControl, significant_table)
EndoNeg_HeatxControl2 <- EndoNeg_HeatxControl
EndoNeg_HeatxControl2$significance <- "Not Significant"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < pvalue_threshold & EndoNeg_HeatxControl2$log2FoldChange > log2FC_threshold] <- "Significant Upregulated"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange > 2] <- "Significant Upregulated"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange < (2 * -1)] <- "Significant Downregulated"
saved_df[[EndoNeg_HeatxControl2]][EndoNeg_HeatxControl2$significance %in% c("Significant Upregulated")] <- 1
significant_table[[EndoNeg_HeatxControl2]][EndoNeg_HeatxControl2$significance %in% c("Significant Upregulated")] <- 1
significant_table[[EndoNeg_HeatxControl2]]
head(EndoNeg_HeatxControl2)
significant_table
EndoNeg_HeatxControl2$Gene <- rownames(EndoNeg_HeatxControl2)
significant_table$Gene <- rownames(significant_table)
EndoNeg_HeatxControl2 <- EndoNeg_HeatxControl
df_subset <- EndoNeg_HeatxControl2["significance"]
EndoNeg_HeatxControl2
EndoNeg_HeatxControl2$significance <- "Not Significant"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange > 2] <- "Significant Upregulated"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange < (2 * -1)] <- "Significant Downregulated"
EndoNeg_HeatxControl2
df_subset <- EndoNeg_HeatxControl2["significance"]
df_subset$Gene <- rownames(df_subset)
significant_table$Gene <- rownames(significant_table)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
df_subset
significant_table
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
df_subset
significant_table
as.data.frame(df_subset)
df_subset <- as.data.frame(df_subset)
significant_table$Gene <- rownames(significant_table)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
merged_df
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 0)))
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1)))
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 0))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
head(significant_table)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 0))
head(significant_table)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
head(significant_table)
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
head(significant_table)
significant_table$Gene <- rownames(significant_table)
head(significant_table)
EndoNeg_HeatxControl2 <- EndoNeg_HeatxControl
EndoNeg_HeatxControl2$significance <- "Not Significant"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange > 2] <- "Significant Upregulated"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange < (2 * -1)] <- "Significant Downregulated"
df_subset <- EndoNeg_HeatxControl2["significance"]
df_subset$Gene <- rownames(df_subset)
df_subset <- as.data.frame(df_subset)
df_subset
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
merged_df
colnames(merged_df)[colnames(merged_df) == "significance"] <- "name1"
merged_df
colnames(merged_df)[colnames(merged_df) == "significance"] <- "name1"
head(merged_df)
head(merged_df)
EndoNeg_HeatxControl2
deparse(substitute(EndoNeg_HeatxControl2))
# FUnction currently incomplete. Currently only stops the function from running if there is no log2 and pvalue columns (probs useless)
# Im thinking we edit this. It should use a pvalue table and a log2 table. Then use the respective thresholds on each
find_significance <- function(results, significant_table, log2FC_threshold = 2, pvalue_threshold = 0.05) {
# Ensure the results have the required columns
if(!all(c("log2FoldChange", "padj") %in% colnames(results))) {
stop("Results must contain 'log2FoldChange' and 'padj' columns.")
}
# getting the name of the dataframe as a string
name <- deparse(substitute(results))
results$significance <- "Not Significant"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange > log2FC_threshold] <- "Significant Upregulated"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange < (log2FC_threshold * -1)] <- "Significant Downregulated"
df_subset <- results["significance"]
df_subset$Gene <- rownames(df_subset)
df_subset <- as.data.frame(df_subset)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
# Here we would save the name of the datatable we are using as a string to be used in the next command.
colnames(merged_df)[colnames(merged_df) == "significance"] <- name
return(significant_table)
}
# Make a list of datasets we want to analyze.
comparison_list <- c("EndoNeg_HeatxControl", "EndoPos_HeatxControl", "EndoPos_HPxControl", "EndoNeg_HPxControl", "EndoPos_HPxHeat", "EndoNeg_HPxHeat", "Control_NegxPos", "Heat_NegxPos", "PxH_NegxPos")
gene_names <- rownames(dds)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
for (data_set in comparison_list) {
significant_table2 <- find_significance(data_set, significant_table, 2, 0.05)
significant_table <- significant_table2
print(significant_table)
}
for (data_set in comparison_list) {
print(data_set)
significant_table2 <- find_significance(data_set, significant_table, 2, 0.05)
significant_table <- significant_table2
print(significant_table)
}
for (data_set in comparison_list) {
print(data_set)
significant_table2 <- find_significance(data_set, significant_table, 2, 0.05)
significant_table <- significant_table2
print(significant_table)
}
for (data_set in comparison_list) {
print(data_set)
# significant_table2 <- find_significance(data_set, significant_table, 2, 0.05)
# significant_table <- significant_table2
# print(significant_table)
}
# FUnction currently incomplete. Currently only stops the function from running if there is no log2 and pvalue columns (probs useless)
# Im thinking we edit this. It should use a pvalue table and a log2 table. Then use the respective thresholds on each
find_significance <- function(results, significant_table, log2FC_threshold = 2, pvalue_threshold = 0.05) {
# Ensure the results have the required columns
if(!all(c("log2FoldChange", "padj") %in% colnames(results))) {
stop("Results must contain 'log2FoldChange' and 'padj' columns.")
}
# getting the name of the dataframe as a string
name <- deparse(substitute(results))
results$significance <- "Not Significant"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange > log2FC_threshold] <- "Significant Upregulated"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange < (log2FC_threshold * -1)] <- "Significant Downregulated"
df_subset <- results["significance"]
df_subset$Gene <- rownames(df_subset)
df_subset <- as.data.frame(df_subset)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
# Here we would save the name of the datatable we are using as a string to be used in the next command.
colnames(merged_df)[colnames(merged_df) == "significance"] <- name
return(significant_table)
}
find_significance(EndoNeg_HeatxControl, significant_table, 2, 0.05)
# FUnction currently incomplete. Currently only stops the function from running if there is no log2 and pvalue columns (probs useless)
# Im thinking we edit this. It should use a pvalue table and a log2 table. Then use the respective thresholds on each
find_significance <- function(results, significant_table, log2FC_threshold = 2, pvalue_threshold = 0.05) {
# Ensure the results have the required columns
if(!all(c("log2FoldChange", "padj") %in% colnames(results))) {
stop("Results must contain 'log2FoldChange' and 'padj' columns.")
}
# getting the name of the dataframe as a string
name <- deparse(substitute(results))
results$significance <- "Not Significant"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange > log2FC_threshold] <- "Significant Upregulated"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange < (log2FC_threshold * -1)] <- "Significant Downregulated"
df_subset <- results["significance"]
df_subset$Gene <- rownames(df_subset)
df_subset <- as.data.frame(df_subset)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
# Here we would save the name of the datatable we are using as a string to be used in the next command.
colnames(merged_df)[colnames(merged_df) == "significance"] <- name
return(merged_df)
}
find_significance(EndoNeg_HeatxControl, significant_table, 2, 0.05)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
for (data_set in comparison_list) {
print(data_set)
significant_table2 <- find_significance(data_set, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
for (data_set in comparison_list) {
print(data_set)
df <- get(data_set)
significant_table2 <- find_significance(df, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
head(significant_table)
head(significant_table)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
significant_table2 <- find_significance(get(data_set), significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
head(significant_table)
########## preparing to run significance function ###########
#Make a list of datasets we want to analyze.
comparison_list <- c("EndoNeg_HeatxControl", "EndoPos_HeatxControl", "EndoPos_HPxControl", "EndoNeg_HPxControl", "EndoPos_HPxHeat", "EndoNeg_HPxHeat", "Control_NegxPos", "Heat_NegxPos", "PxH_NegxPos")
gene_names <- rownames(dds)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
significant_table2 <- find_significance(get(data_set, significant_table, 2, 0.05)
significant_table <- significant_table2
######## Running significance function ###########
for (data_set in comparison_list) {
########## preparing to run significance function ###########
#Make a list of datasets we want to analyze.
comparison_list <- c("EndoNeg_HeatxControl", "EndoPos_HeatxControl", "EndoPos_HPxControl", "EndoNeg_HPxControl", "EndoPos_HPxHeat", "EndoNeg_HPxHeat", "Control_NegxPos", "Heat_NegxPos", "PxH_NegxPos")
gene_names <- rownames(dds)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
significant_table2 <- find_significance(get(data_set), significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
}
head(significant_table)
comparison_list
head(significant_table)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
data_name <- data_set
get(data_set)
assign(data_name, data_set)
significant_table2 <- find_significance(data_name, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
data_name
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
data_name <- data_set
data_set <- get(data_set)
assign(data_name, data_set)
significant_table2 <- find_significance(data_name, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
data_set
data_frame <- get(data_set)
data_frame
get(EndoNeg_HeatxControl)
data_set <- get(EndoNeg_HeatxControl)
head(data_set)
EndoNeg_HeatxControl
EndoNeg_HeatxControl
EndoPos_HeatxControl
EndoPos_HPxControl
# Endo negative, heat v control
EndoNeg_HeatxControl <- get_results(dds,"group","NegativeHeat","NegativeControl")
summary(EndoNeg_HeatxControl)
EndoNeg_HeatxControl <- EndoNeg_HeatxControl[order(EndoNeg_HeatxControl$pvalue),]
head(EndoNeg_HeatxControl)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
data_name <- data_set
data_frame <- get(data_set)
assign(data_name, data_frame)
significant_table2 <- find_significance(data_name, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
EndoNeg_HeatxControl
data_name
get(data_set)
data_frame
data_name
assign(data_name, data_frame)
data_frame
data_name
assign(data_name, data_frame, envir = .GlobalEnv)
data_name
data_frame
data_set
data_name <- data_set
data_frame <- get(data_set)
assign(data_name, data_frame, envir = .GlobalEnv)
head(data_name)
head(data_frame)
class(data_frame)
class(data_name)
head(significant_table)
significant_table2 <- find_significance(EndoNeg_HeatxControl, significant_table, 2, 0.05)
significant_table <- significant_table2
significant_table2 <- find_significance(EndoPos_HeatxControl, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
data_frame <- get(data_set)
significant_table2 <- find_significance(data_frame, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
colnames(significant_table)[3:ncol(significant_table)] <- comparison_list
head(significant_table)
View(significant_table)
#######################################
# PCA Plots function
#######################################
make_PCA <- function(dds, PCx = "PC1", PCy = "PC2", colors = "Treatment" ){
vsd <- vst(dds, blind = FALSE)
# Doing a regular PCA without auto making it via DeSeq2
vst_data <- assay(vsd) # creates an expression matrix
pca_result <- prcomp(t(vst_data), center = TRUE, scale. = TRUE) # does PCA
explained_variance <- summary(pca_result)$importance[2, 1:100] * 100 # extracting explained variance
pca_data <- as.data.frame(pca_result$x) #savong as data frame
pca_data$sample <- rownames(pca_data)
sample_info <- as.data.frame(colData(dds))
pca_data <- merge(pca_data, sample_info, by.x = "sample", by.y = "row.names") # adding metadata
PCx_sym <- sym(PCx)
PCy_sym <- sym(PCy)
colors_sym <- sym(colors)
pca_plot <- ggplot(pca_data, aes(x = !!PCx_sym, y = !!PCy_sym, color = !!colors_sym)) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste(PCx, " - ", round(explained_variance[1], 1), "%", sep=""),
y = paste(PCy, " - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
return(pca_plot)
}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup=c("Clone"))
# Doing a regular PCA without auto making it via DeSeq2
vst_data <- assay(vsd) # creates an expression matrix
pca_result <- prcomp(t(vst_data), center = TRUE, scale. = TRUE) # does PCA
explained_variance <- summary(pca_result)$importance[2, 1:100] * 100 # extracting explained variance
pca_data <- as.data.frame(pca_result$x) #savong as data frame
pca_data$sample <- rownames(pca_data)
sample_info <- as.data.frame(colData(dds))
pca_data <- merge(pca_data, sample_info, by.x = "sample", by.y = "row.names") # adding metadata
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste("PC1 - ", round(explained_variance[1], 1), "%", sep=""),
y = paste("PC2 - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
print(pca_plot)
pca_plot <- ggplot(pca_data, aes(x = PC3, y = PC4, color = Treatment)) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste("PC1 - ", round(explained_variance[1], 1), "%", sep=""),
y = paste("PC2 - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
print(pca_plot)
pca_plot <- ggplot(pca_data, aes(x = PC5, y = PC6, color = Treatment)) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste("PC1 - ", round(explained_variance[1], 1), "%", sep=""),
y = paste("PC2 - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
print(pca_plot)
pca_plot <- ggplot(pca_data, aes(x = PC7, y = PC8, color = Treatment)) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste("PC1 - ", round(explained_variance[1], 1), "%", sep=""),
y = paste("PC2 - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
print(pca_plot)
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC6, color = Treatment)) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste("PC1 - ", round(explained_variance[1], 1), "%", sep=""),
y = paste("PC2 - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
print(pca_plot)
pca_data
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Time )) +
geom_point(size = 4) +
labs(
title = "PCA Plot",
x = paste("PC1 - ", round(explained_variance[1], 1), "%", sep=""),
y = paste("PC2 - ", round(explained_variance[2], 1), "%", sep="")
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
print(pca_plot)
head(significant_table)
write.csv(significant_table, file = "significant_table.csv", row.names = FALSE)
gc()
gc()
gc()
###################################
# Volcano plots of interactions
###################################
separator <- ggplot() + theme_void() +
theme(panel.background = element_rect(fill = "black", colour = "black"))
# Heat x Control
volcano_plot_EndoNeg_HeatxControl <- create_volcano_plot(EndoNeg_HeatxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "EndoNeg vs HeatxControl")
print(volcano_plot_EndoNeg_HeatxControl)
# Heat x Control
volcano_plot_EndoNeg_HeatxControl <- create_volcano_plot(EndoNeg_HeatxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endo Negative,  HeatxControl")
print(volcano_plot_EndoNeg_HeatxControl)
volcano_plot_EndoPos_HeatxControl <- create_volcano_plot(EndoPos_HeatxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endo Positive,  HeatxControl")
print(volcano_plot_EndoPos_HeatxControl)
# HeatxPresipitation x control
volcano_plot_EndoPos_HPxControl <- create_volcano_plot(EndoPos_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Posititve, Heat x Control")
print(volcano_plot_EndoPos_HPxControl)
# HeatxPresipitation x control
volcano_plot_EndoPos_HPxControl <- create_volcano_plot(EndoPos_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Posititve, Heat with Percipitation x Control")
print(volcano_plot_EndoPos_HPxControl)
volcano_plot_EndoNeg_HPxControl <- create_volcano_plot(EndoNeg_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Negative, Heat with Percipitation x Control")
print(volcano_plot_EndoNeg_HPxControl)
# HeatxPresipitation x Heat
volcano_plot_EndoPos_HPxHeat <- create_volcano_plot(EndoPos_HPxHeat, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Positive, Heat with Percipitation x Heat")
print(volcano_plot_EndoPos_HPxHeat)
volcano_plot_EndoNeg_HPxHeat <- create_volcano_plot(EndoNeg_HPxHeat, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Endophyte Negative, Heat with Percipitation x Heat")
print(volcano_plot_EndoNeg_HPxHeat)
# Treatments, Negative x Positive
volcano_plot_Heat_NegxPos <- create_volcano_plot(Heat_NegxPos, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Heat treatment, Endo Negative x Positive")
print(volcano_plot_Heat_NegxPos)
volcano_plot_HP_NegxPos <- create_volcano_plot(PxH_NegxPos, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Heat with Percipitation, Endo Negactive x Positive")
print(volcano_plot_HP_NegxPos)
volcano_plot_Control_NegxPos <- create_volcano_plot(Control_NegxPos, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "Control, Endo Negactive x Positive")
print(volcano_plot_Control_NegxPos)
