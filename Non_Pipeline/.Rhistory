slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(.protein_counts[["EndoPos_HpxControl_significantly_upregulated"]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(data[["EndoPos_HpxControl_significantly_upregulated"]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(.data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
protein_counts
View(protein_counts)
protein_counts <- protein_counts[rownames(protein_counts) != "-", ]
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 100)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(.data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
protein_counts <- protein_counts[rownames(protein_counts) != "-", ]
View(protein_counts)
rownames(protein_counts)
protein_counts <- protein_counts %>%
filter(Unique_Value != "-")
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts <- protein_counts %>%
filter(Unique_Value != "-")
protein_counts <- protein_counts %>%
filter(Unique_Value != "consensus disorder prediction")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 100)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 20),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a horizontal bar graph with ggplot
p <- ggplot(top_10, aes(y = reorder(Unique_Value, .data[[column_name]]),
x = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
y = "Proteins",
x = "Sequences Detected") +
theme_bw() +
scale_x_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 20),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(size = 12),                         # Increased x-axis label size
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# File locations
data_folder <- "home/darrian/Documents/RNA_seq_fescue/r_data"
MetaData_loc <- paste0(data_folder, "/Meta_Data.csv")
MetaData_loc
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
MetaData <- read.table(MetaData_loc, header = TRUE, sep = "," )
# File locations
# data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
MetaData_loc <- paste0(data_folder, "/Meta_Data.csv")
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
MetaData <- read.table(MetaData_loc, header = TRUE, sep = "," )
# File locations
data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
MetaData_loc <- paste0(data_folder, "/Meta_Data.csv")
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
MetaData <- read.table(MetaData_loc, header = TRUE, sep = "," )
Featurecount <- read.table(Featurecount_loc, header = TRUE)
View(MetaData)
View(Featurecount)
###############################
# Running DeSeq2
###############################
#Makes DeSeq data set
dds <- DESeqDataSetFromMatrix(countData = Featurecount,
colData = MetaData,
design= ~ Month + Clone + Year + Endophyte + Treatment, tidy = TRUE)
# Install Bioconductor if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
# Install Bioconductor if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(tidyverse)
library(grid)
library(data.table)
library(unix)
install.packages(unix)
install.packages("unix")
###############################
# Fixing data
###############################
Featurecount$feature <- rownames(Featurecount)
# Move the new column to the first position
Featurecount <- Featurecount[, c("feature", setdiff(names(Featurecount), "feature"))]
MetaData$Year <- as.character(MetaData$Year)
###############################
# Running DeSeq2
###############################
#Makes DeSeq data set
dds <- DESeqDataSetFromMatrix(countData = Featurecount,
colData = MetaData,
design= ~ Month + Clone + Year + Endophyte + Treatment, tidy = TRUE)
nrow(Featurecount)
nrow(MetaData)
ncol(Featurecount)
row.names(Featurecount)
colnames(Featurecount)
killme <- colnames(Featurecount)
as.data.frame(killme)
killme <- as.data.frame(killme)
View(killme)
View(killme)
View(killme)
View(killme)
write.csv(killme,"featurenames.txt",row.names = FALSE)
ncol(Featurecount)
nrow(MetaData)
IDs <- colnames(Featurecount)
IDs <- as.data.frame(killme)
View(IDs)
IDs[-1, ]
IDs <- IDs[-1, ]
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),  # Get last character (N or P)
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),  # Remove _ and digit
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),  # Extract just the digit
Harvest = str_extract(SampleName, "(O17|J16)"),
SampleID = str_extract(SampleName, "A\\d+")
)
View(metadata)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16)"),
Month = case_when(
HarvestCode == "O17" ~ "October",
HarvestCode == "J16" ~ "June",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "O17" ~ "2017",
HarvestCode == "J16" ~ "2016",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('H'='Heat','HP'='HeatxPercipitation', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
subset(metadata, select = -c(HarvestCode))
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode == "O17" ~ "October",
HarvestCode == "J16" ~ "June",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "O17" ~ "2017",
HarvestCode == "J16" ~ "2016",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode %in% c("J16", "J17") ~ "June",
HarvestCode %in% c("O16", "O17") ~ "October",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "J16" ~ "2016",
HarvestCode == "O16" ~ "2016",
HarvestCode == "J17" ~ "2017",
HarvestCode == "O17" ~ "2017",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('H'='Heat','HP'='HeatxPercipitation', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
subset(metadata, select = -c(HarvestCode))
metadata <- subset(metadata, select = -c(HarvestCode))
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode %in% c("J16", "J17") ~ "June",
HarvestCode %in% c("O16", "O17") ~ "October",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "J16" ~ "2016",
HarvestCode == "O16" ~ "2016",
HarvestCode == "J17" ~ "2017",
HarvestCode == "O17" ~ "2017",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('HP'='HeatxPercipitation','H'='Heat', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
metadata <- subset(metadata, select = -c(HarvestCode))
