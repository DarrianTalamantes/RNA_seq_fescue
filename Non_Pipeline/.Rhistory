print(volcano_plot_EndoPos_HeatxControl)
combined_plot1 <- ggarrange(volcano_plot_EndoNeg_HeatxControl, separator, volcano_plot_EndoPos_HeatxControl, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot1, top = text_grob("Heat x Control Volcano Plots", face = "bold", size = 19))
combined_plot1 <- ggarrange(volcano_plot_EndoNeg_HeatxControl, separator, volcano_plot_EndoPos_HeatxControl, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot1, top = text_grob("Heat x Control Volcano Plots", face = "bold", size = 24))
# HeatxPresipitation x control
volcano_plot_EndoPos_HPxControl <- create_volcano_plot(EndoPos_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "E+, Heat with Percipitation x Control")
print(volcano_plot_EndoPos_HPxControl)
volcano_plot_EndoNeg_HPxControl <- create_volcano_plot(EndoNeg_HPxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "E-, Heat with Percipitation x Control")
print(volcano_plot_EndoNeg_HPxControl)
combined_plot2 <- ggarrange(volcano_plot_EndoNeg_HPxControl, separator, volcano_plot_EndoPos_HPxControl, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot2, top = text_grob("Heat with Percipitation x Control Volcano Plots", face = "bold", size = 24))
# HeatxPresipitation x Heat
volcano_plot_EndoPos_HPxHeat <- create_volcano_plot(EndoPos_HPxHeat, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "E+, Heat with Percipitation x Heat")
print(volcano_plot_EndoPos_HPxHeat)
volcano_plot_EndoNeg_HPxHeat <- create_volcano_plot(EndoNeg_HPxHeat, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "E-, Heat with Percipitation x Heat")
print(volcano_plot_EndoNeg_HPxHeat)
combined_plot3 <- ggarrange(volcano_plot_EndoNeg_HPxHeat, separator, volcano_plot_EndoPos_HPxHeat, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot3, top = text_grob("Heat with Percipitation x Heat Volcano Plots", face = "bold", size = 24))
# Heat x Control
volcano_plot_EndoNeg_HeatxControl <- create_volcano_plot(EndoNeg_HeatxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "E-,  Heat x Control")
print(volcano_plot_EndoNeg_HeatxControl)
volcano_plot_EndoPos_HeatxControl <- create_volcano_plot(EndoPos_HeatxControl, log2FC_threshold = 2, pvalue_threshold = 0.05, title = "E+,  Heat x Control")
print(volcano_plot_EndoPos_HeatxControl)
combined_plot1 <- ggarrange(volcano_plot_EndoNeg_HeatxControl, separator, volcano_plot_EndoPos_HeatxControl, ncol = 3, nrow =1, common.legend = TRUE, legend = "bottom", widths = c(1 ,.005 ,1))
annotate_figure(combined_plot1, top = text_grob("Heat x Control Volcano Plots", face = "bold", size = 24))
# Please run lines 267 - 328 before this to make the data
####### Function to get a significance table #########
find_significance <- function(results, significant_table, log2FC_threshold = 2, pvalue_threshold = 0.05) {
# Ensure the results have the required columns
if(!all(c("log2FoldChange", "padj") %in% colnames(results))) {
stop("Results must contain 'log2FoldChange' and 'padj' columns.")
}
# getting the name of the dataframe as a string
name <- deparse(substitute(results))
results$significance <- "Not Significant"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange > log2FC_threshold] <- "Significant Upregulated"
results$significance[results$padj < pvalue_threshold & results$log2FoldChange < (log2FC_threshold * -1)] <- "Significant Downregulated"
df_subset <- results["significance"]
df_subset$Gene <- rownames(df_subset)
df_subset <- as.data.frame(df_subset)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
# Here we would save the name of the datatable we are using as a string to be used in the next command.
colnames(merged_df)[colnames(merged_df) == "significance"] <- name
return(merged_df)
}
########## preparing to run significance function ###########
#Make a list of datasets we want to analyze.
comparison_list <- c("EndoNeg_HeatxControl", "EndoPos_HeatxControl", "EndoPos_HPxControl", "EndoNeg_HPxControl", "EndoPos_HPxHeat", "EndoNeg_HPxHeat", "Control_NegxPos", "Heat_NegxPos", "PxH_NegxPos")
gene_names <- rownames(dds)
# Creating blank data table to fill in with values
significant_table <- data.table(matrix(0, nrow = length(gene_names), ncol = 1))
significant_table <- as.data.frame(significant_table)
rownames(significant_table) <- gene_names
significant_table$Gene <- rownames(significant_table)
head(significant_table)
######## Running significance function ###########
for (data_set in comparison_list) {
print(data_set)
data_frame <- get(data_set)
significant_table2 <- find_significance(data_frame, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
}
colnames(significant_table)[3:ncol(significant_table)] <- comparison_list
head(significant_table)
################################################################################
EndoNeg_HeatxControl2 <- EndoNeg_HeatxControl
EndoNeg_HeatxControl2$significance <- "Not Significant"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange > 2] <- "Significant Upregulated"
EndoNeg_HeatxControl2$significance[EndoNeg_HeatxControl2$padj < .05 & EndoNeg_HeatxControl2$log2FoldChange < (2 * -1)] <- "Significant Downregulated"
df_subset <- EndoNeg_HeatxControl2["significance"]
df_subset$Gene <- rownames(df_subset)
df_subset <- as.data.frame(df_subset)
merged_df <- merge(significant_table, df_subset, by = "Gene", all = TRUE)
# Here we would save the name of the datatable we are using as a string to be used in the next command.
colnames(merged_df)[colnames(merged_df) == "significance"] <- "name1"
significant_table2 <- find_significance(EndoNeg_HeatxControl, significant_table, 2, 0.05)
significant_table <- significant_table2
significant_table2 <- find_significance(EndoPos_HeatxControl, significant_table, 2, 0.05)
significant_table <- significant_table2
head(significant_table)
class(data_name)
head(data_name)
annotate_figure(combined_plot1, top = text_grob("Heat x Control Volcano Plots", face = "bold", size = 19))
library(tidyverse)
protein_counts_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/RNA_seq_fescue/interpro_results/proteinCount.csv"
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = steelblue, endo_color = firebrick1) {
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(3:12)
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(colour = endo_color))  # Rotate x-axis labels for better readability
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "Endo Positive: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "Endo Positive: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "Endo Negative: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "Endo Negative: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "Endo Positive: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_downregulated", Graph_Title = "Endo Positive: Heat vs Control: Downregulated", color = "steelblue", endo_color = "black")
colnames(protein_counts)
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_downregulated", Graph_Title = "E+: Heat vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# HP x Heat
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxHeat_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Heat
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_upregulated", Graph_Title = "Heat: E+ x E-: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "Heat_NegxPos_significantly_downregulated", Graph_Title = "Heat: E+ x E-: Downregulated", color = "steelblue", endo_color = "black")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(3:12) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create the bar graph with increased text sizes and truncated x-axis labels
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(protein_counts[[column_name]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(protein_counts[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(protein_counts[["EndoPos_HpxControl_significantly_upregulated"]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(.protein_counts[["EndoPos_HpxControl_significantly_upregulated"]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(data[["EndoPos_HpxControl_significantly_upregulated"]])) %>%
slice(1:10) %>%
colnames(protein_counts)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(.data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
protein_counts
View(protein_counts)
protein_counts <- protein_counts[rownames(protein_counts) != "-", ]
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 100)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
##################################
# Make barplots
##################################
protein_counts %>%
arrange(desc(.data[[EndoPos_HpxControl_significantly_upregulated]])) %>%
slice(1:10)
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
protein_counts <- protein_counts[rownames(protein_counts) != "-", ]
View(protein_counts)
rownames(protein_counts)
protein_counts <- protein_counts %>%
filter(Unique_Value != "-")
###############################
# loading data
###############################
protein_counts <- read.table(protein_counts_loc, header = TRUE, sep = "," )
protein_counts <- protein_counts %>%
filter(Unique_Value != "-")
protein_counts <- protein_counts %>%
filter(Unique_Value != "consensus disorder prediction")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 100)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 40,
paste0(substr(Unique_Value, 1, 40), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: HeatxPercipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: HeatxPercipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 16),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Heat x control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HeatxControl_significantly_upregulated", Graph_Title = "E+: Heat vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a bar graph with ggplot
p <- ggplot(top_10, aes(x = reorder(Unique_Value, -.data[[column_name]]),
y = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
x = "Proteins",
y = "Sequences Detected") +
theme_bw() +
scale_y_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 20),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(angle = 60, hjust = 1, size = 12),  # Increased x-axis label size and rotated
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
colnames(protein_counts)
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_downregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "grey40")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
# Sort the data frame by 'specific_column' in descending order and select the top 10 rows
create_bar_graph <- function(data, column_name, Graph_Title = "Top 10 Proteins Found", color = "steelblue", endo_color = "firebrick1") {
# Select and format the top 10 proteins
top_10 <- data %>%
arrange(desc(.data[[column_name]])) %>%
slice(1:10) %>%
mutate(Unique_Value = ifelse(nchar(Unique_Value) > 30,
paste0(substr(Unique_Value, 1, 30), "..."),
Unique_Value))
# Create a horizontal bar graph with ggplot
p <- ggplot(top_10, aes(y = reorder(Unique_Value, .data[[column_name]]),
x = .data[[column_name]])) +
geom_bar(stat = "identity", fill = color) +
labs(title = Graph_Title,
y = "Proteins",
x = "Sequences Detected") +
theme_bw() +
scale_x_continuous(limits = c(0, 60)) +
theme(
plot.title = element_text(colour = endo_color, size = 20),     # Increased title font size
axis.title.x = element_text(size = 14),                        # Increased x-axis title font size
axis.title.y = element_text(size = 14),                        # Increased y-axis title font size
axis.text.x = element_text(size = 12),                         # Increased x-axis label size
axis.text.y = element_text(size = 12)                          # Increased y-axis label size
)
return(p)
}
# HP vs Control
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_upregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoPos_HpxControl_significantly_downregulated", Graph_Title = "E+: Heat & Percipitation vs Control: Downregulated", color = "steelblue", endo_color = "black")
create_bar_graph(data = protein_counts, column_name = "EndoNeg_HpxControl_significantly_upregulated", Graph_Title = "E-: Heat & Percipitation vs Control: Upregulated", color = "firebrick1", endo_color = "black")
