filtered_col <- col[col >= cutoff]
})
total_degs_treatments$Gene <- rownames(total_degs_treatments)
# Combine all top gene names into one unique set
top_genes_unique3 <- unique(unlist(lapply(top_genes_list3, names)))
# Subset the original table with only those genes
total_degs_treatments <- total_degs_treatments[total_degs_treatments$Gene %in% top_genes_unique3, ]
total_degs_treatments$Gene <- NULL
return(list(
final_CTE_Up_Down = final_CTE_Up_Down,
final_Treats_Up_Down = final_Treats_Up_Down,
total_degs_genos = total_degs_genos,
total_degs_treatments = total_degs_treatments
))
}
################################################################################
# Function to get data ready for upset plot and to make upset plot
################################################################################
# Binary data for upset plot
upsetter <- function(dataframe, title_name = "DEFAULT TITLE"){
binary_df <- dataframe %>%
rownames_to_column(var = "Gene") %>%
mutate(across(-Gene, ~ ifelse(. != 0, 1, 0)))
plot1 <- upset(binary_df,
intersect = colnames(binary_df)[-which(names(binary_df) == "Gene")],
name = "Unique Genes",
base_annotations = list('Intersection size' = intersection_size())) +
labs(title = title_name)
return(plot1)
}
binary_data <- function(dataframe){
binary_df <- dataframe %>%
rownames_to_column(var = "Gene") %>%
mutate(across(-Gene, ~ ifelse(. != 0, 1, 0)))
return(binary_df)
}
#######################
# Using the functions
#######################
all_counts <- data_splitter(gene_counts, 1)
upsetter(all_counts$final_CTE_Up_Down, "E+ and E- DEGs by Genotype")
upsetter(all_counts$final_Treats_Up_Down, "E+ and E- DEGs by Treatment")
p1 <- upsetter(all_counts$total_degs_genos, "E+ and E- DEGs by Genotype")
p2 <- upsetter(all_counts$total_degs_treatments, "E+ and E- DEGs by Treatment")
plot_grid(p1, p2, labels = c("A", "B"), ncol = 1, align = "v")
binary_data(all_counts$final_CTE_Up_Down)
p1 <- upsetter(all_counts$total_degs_genos, "E+ and E- DEGs by Genotype No DEG Count Filter")
p2 <- upsetter(all_counts$total_degs_treatments, "E+ and E- DEGs by Treatment No DEG Count Filter")
plot_grid(p1, p2, labels = c("A", "B"), ncol = 1, align = "v")
total_degs_genos
View(total_degs_genos)
top_genes_list2
combos
all_names
split_names
names_by_geno_n_treat
# Heatmap ?
pheatmap(total_degs_treatments,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
main = "Gene Expression Heatmap")
# Heatmap ?
pheatmap(total_degs_treatments,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
main = "Gene Expression Heatmap")
)
total_degs_treatments
gene_counts
results_list_CloneXHTxTreat
all_names
results_list_CloneXHTxTreat
View(results_list_CloneXHTxTreat)
combinations
View(total_degs_treatments)
View(total_degs_treatments)
# Get rid of rows that are all 0
total_degs_treatments_filtered <- total_degs_treatments[rowSums(total_degs_treatments) != 0, ]
# Heatmap ?
pheatmap(total_degs_treatments_filtered,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
main = "Gene Expression Heatmap")
total_degs_genos <- all_counts$total_degs_genos
total_degs_genos <- all_counts$total_degs_genos
total_degs_genos_filtered <- total_degs_genos[rowSums(total_degs_genos) != 0, ]
# Heatmap ?
pheatmap(total_degs_genos_filtered,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
main = "Gene Expression Heatmap")
# Heatmap ?
pheatmap(total_degs_treatments_filtered,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
labels_row = NA,
color = colorRampPalette(c("white", "red"))(100),
main = "Gene Expression Heatmap")
# Heatmap ?
pheatmap(total_degs_genos_filtered,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
labels_row = NA,
color = colorRampPalette(c("white", "red"))(100),
main = "Gene Expression Heatmap")
head(all_counts)
# Heatmap ?
pheatmap(total_degs_treatments_filtered,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
labels_row = NA,
color = colorRampPalette(c("white", "red"))(100),
main = "DEGs Grouped by Treatment")
# Heatmap ?
pheatmap(total_degs_genos_filtered,
scale = "none",         # use "row" to normalize by row, "none" for raw values
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize_row = 7,
fontsize_col = 10,
labels_row = NA,
color = colorRampPalette(c("white", "red"))(100),
main = "DEGs Grouped by Genotype")
################################################################################
# Making 3 tabels counting DEGs in every genotype.
################################################################################
#### Creating lists of different sample groups to look at
names(results_list_CloneXHTxTreat)
results_list_CloneXHTxTreat
nrow(results_list_CloneXHTxTreat)
Metadata$Clone
metadata$Clone
# Load Libraries
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(tidyverse)
library(grid)
library(data.table)
library(pheatmap)
# Load Data
# File locations
data_folder <- "/home/darrian/Documents/RNA_seq_fescue/r_data"
Featurecount_loc <- paste0(data_folder, "/feature_counts_name_fixed.txt")
###############################
# loading data
###############################
Featurecount <- read.table(Featurecount_loc, header = TRUE)
###############################
# Fixing data
###############################
# Featurecount$feature <- rownames(Featurecount)
# # Move the new column to the first position
# Featurecount <- Featurecount[, c("feature", setdiff(names(Featurecount), "feature"))]
# Creating the MetaData
IDs <- colnames(Featurecount)
IDs <- as.data.frame(IDs)
IDs <- IDs[-1, ]
# write.csv(IDs,"featurenames.txt",row.names = FALSE)
metadata <- data.frame(SampleName = IDs) %>%
mutate(
Clone = str_extract(SampleName, "CTE\\d+"),
Endophyte = str_extract(SampleName, "CTE\\d+(N|P)"),
Endophyte = str_sub(Endophyte, -1),
Treatment = str_extract(SampleName, "_(H|HP|C)\\d"),
Treatment = str_remove_all(Treatment, "_|\\d"),
Replicate = str_extract(SampleName, "(H|HP|C)(\\d)"),
Replicate = str_extract(Replicate, "\\d"),
HarvestCode = str_extract(SampleName, "(O17|J16|O16|J17)"),
Month = case_when(
HarvestCode %in% c("J16", "J17") ~ "June",
HarvestCode %in% c("O16", "O17") ~ "October",
TRUE ~ NA_character_
),
Year = case_when(
HarvestCode == "J16" ~ "2016",
HarvestCode == "O16" ~ "2016",
HarvestCode == "J17" ~ "2017",
HarvestCode == "O17" ~ "2017",
TRUE ~ NA_character_
),
HarvestTime = paste(Month, Year, sep = "_"),
SampleID = str_extract(SampleName, "A\\d+")
)
rep_str = c('N'='Negative','P'='Positive')
metadata$Endophyte <- str_replace_all(metadata$Endophyte, rep_str)
rep_str2 = c('HP'='HeatxPercipitation','H'='Heat', 'C' = 'Control')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str2)
rep_str3 = c('Heateat'='Heat')
metadata$Treatment <- str_replace_all(metadata$Treatment, rep_str3)
metadata <- subset(metadata, select = -c(HarvestCode))
Featurecount <- Featurecount[, colnames(Featurecount) %in% metadata$SampleName]
ncol(Featurecount)
nrow(metadata)
metadata
# partitions the data by Clone and Treatment.
dds_by_ClonexTreat <- function(CountsData, Metadata, CloneName, Treat){
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone_endo[meta_clone_endo$Treatment == Treat,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# partitions the data by Clone and Treatment.
dds_by_ClonexTreat <- function(CountsData, Metadata, CloneName, Treat){
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone_endo[meta_clone_endo$Treatment == Treat,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
################################################################################
# Using the function to create datasets seperated by Clone and Treatment
################################################################################
# 1. Get all unique combinations of Clone and Endophyte
combos <- expand.grid(Clone = unique(metadata$Clone),
Treatment = unique(metadata$Treatment),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list_ClonexTreat <- list()
for (clone_name in unique(metadata$Clone)) {
for (treat in unique(metadata$Treatment)) {
result_key <- paste0(clone_name, "_",treat)
tryCatch({
res <- dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
results_list_ClonexTreat[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
results(results_list_ClonexTreat$CTE46_HeatxPercipitation)
combos
metadata$Clone
unique(metadata$Clone)
unique(metadata$Treatment)
# partitions the data by Clone and Treatment.
dds_by_ClonexTreat <- function(CountsData, Metadata, CloneName, Treat){
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone_endo[meta_clone_endo$Treatment == Treat,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# 1. Get all unique combinations of Clone and Endophyte
combos <- expand.grid(Clone = unique(metadata$Clone),
Treatment = unique(metadata$Treatment),
stringsAsFactors = FALSE)
# 1. Get all unique combinations of Clone and Endophyte
combos <- expand.grid(Clone = unique(metadata$Clone),
Treatment = unique(metadata$Treatment),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list_ClonexTreat <- list()
for (clone_name in unique(metadata$Clone)) {
for (treat in unique(metadata$Treatment)) {
result_key <- paste0(clone_name, "_",treat)
tryCatch({
res <- dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
results_list_ClonexTreat[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
# partitions the data by Clone and Treatment.
dds_by_CloneXTreat <- function(CountsData, Metadata, CloneName, Treat){
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Treatment == Treat,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# 1. Get all unique combinations of Clone and Treatment
combos <- expand.grid(Clone = unique(metadata$Clone),
Treatment = unique(metadata$Treatment),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list_ClonexTreat <- list()
for (clone_name in unique(metadata$Clone)) {
for (treat in unique(metadata$Treatment)) {
result_key <- paste0(clone_name,"_",treat)
tryCatch({
res <- dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
results_list_ClonexTreat[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
Metadata = metadata
CloneName = CTE31
CloneName = "CTE31"
Treat = "Control"
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone
meta_clone_endo <- meta_clone[meta_clone$Treatment == Treat,]
meta_clone_endo
# partitions the data by Clone and Treatment.
dds_by_CloneXTreat <- function(CountsData, Metadata = metadata, CloneName = "CTE31", Treat = "Control"){
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Treatment == Treat,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# 1. Get all unique combinations of Clone and Treatment
combos <- expand.grid(Clone = unique(metadata$Clone),
Treatment = unique(metadata$Treatment),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list_ClonexTreat <- list()
for (clone_name in unique(metadata$Clone)) {
for (treat in unique(metadata$Treatment)) {
result_key <- paste0(clone_name,"_",treat)
tryCatch({
res <- dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
results_list_ClonexTreat[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
results(results_list_ClonexTreat$CTE46_HeatxPercipitation)
results_list_ClonexTreat
results_list_ClonexTreat$CTE46_HeatxPercipitation
results(results_list_ClonexTreat$CTE46_HeatxPercipitation)
results_list_ClonexTreat
results(results_list_ClonexTreat$CTE25_Control)
metadata$Treatment
combos
unique(metadata$Treatment)
unique(metadata$Clone)
dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
dds_by_ClonexTreat(Featurecount, metadata, CTE31, Heat)
clone_name
unique(metadata$Clone)
> dds_by_ClonexTreat(Featurecount, metadata, "CTE31", "Heat")
dds_by_ClonexTreat(Featurecount, metadata, "CTE31", "Heat")
dds_by_ClonexTreat(Featurecount, metadata, "CTE25", "Control")
metadata
head(Featurecount)
Treat = "Heat"
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Treatment == Treat,]
meta_clone_endo
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone
meta_clone_endo <- meta_clone[meta_clone$Treatment == Treat,]
meta_clone_endo
nrow(meta_clone)
nrow(meta_clone_endo)
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- Featurecount[, colnames(Featurecount) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- Featurecount[, colnames(Featurecount) %in% meta_clone_endo$SampleName]
counts
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
counts
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
keep
dds_clone <- dds_clone[keep, ]
dds_clone
# partitions the data by Clone and Treatment.
dds_by_CloneXTreat <- function(CountsData, Metadata = metadata, CloneName = "CTE31", Treat = "Heat"){
# Subset metadata
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Treatment == Treat,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Endophyte)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# 1. Get all unique combinations of Clone and Treatment
combos <- expand.grid(Clone = unique(metadata$Clone),
Treatment = unique(metadata$Treatment),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list_ClonexTreat <- list()
for (clone_name in unique(metadata$Clone)) {
for (treat in unique(metadata$Treatment)) {
result_key <- paste0(clone_name,"_",treat)
tryCatch({
res <- dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
results_list_ClonexTreat[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
results_list_ClonexTreat
(treat in unique(metadata$Treatment)
treat in unique(metadata$Treatment)
unique(metadata$Treatment)
result_key
results_list_ClonexTreat
# 2. Loop over each combination and run the function
results_list_ClonexTreat <- list()
for (clone_name in unique(metadata$Clone)) {
for (treat in unique(metadata$Treatment)) {
result_key <- paste0(clone_name,"_",treat)
tryCatch({
res <- dds_by_ClonexTreat(Featurecount, metadata, clone_name, treat )
results_list_ClonexTreat[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
results_list_ClonexTreat
