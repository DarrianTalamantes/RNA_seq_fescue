if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count
gene_counts[[paste0(treatment, "_Down")]] <- down_count
}
# View final table
head(gene_counts)
View(gene_counts)
names_by_treatment
#View by treatment
length(names_by_treatment$Heat)
names_by_treatment$Heat
treatment_lists
View(subset_df)
(length(samples)
(length(samples)
)
f
length((samples))
all(colnames(summary_df) %in% names(label_results))
label_results
View(summary_df)
all(colnames(summary_df) %in% names(label_results))
label_results
View(label_results)
print(Heat_samples)
print(Heat_samples)
intersect(Heat_samples, colnames(summary_df))
intersect(treatment_lists$Heat, colnames(summary_df))
names(label_results)
colnames(summary_df)
intersect(treatment_lists$Heat, colnames(summary_df))
all(colnames(summary_df)[-1] %in% names(label_results))
# Loop through treatments
for (treatment in names(treatment_lists)) {
samples <- treatment_lists[[treatment]]
# Ensure samples exist in summary_df
samples <- intersect(samples, colnames(summary_df))
print(length(samples))
if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count
gene_counts[[paste0(treatment, "_Down")]] <- down_count
}
View(subset_df)
# Loop through treatments
for (treatment in names(treatment_lists)) {
samples <- treatment_lists[[treatment]]
# Ensure samples exist in summary_df
samples <- intersect(samples, colnames(summary_df))
print(length(samples))
if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count / length(samples)
gene_counts[[paste0(treatment, "_Down")]] <- down_count / length(samples)
}
length(names_by_clones$CTE25)
#### This seperates the data into the groups and counts up the up and down
#### regulated genes by group.
# Create an output data frame to store counts
gene_counts <- data.frame(Gene = summary_df$Gene, stringsAsFactors = FALSE)
# Define treatment groups
treatment_lists <- list(
Heat = names_by_treatment$Heat,
Control = names_by_treatment$Control,
HeatxPercipitation = names_by_treatment$HeatxPercipitation,
CTE25 = names_by_clones$CTE25,
CTE31 = names_by_clones$CTE31,
CTE45 = names_by_clones$CTE45,
CTE46 = names_by_clones$CTE46
# Add more if needed
)
# Loop through treatments
for (treatment in names(treatment_lists)) {
samples <- treatment_lists[[treatment]]
# Ensure samples exist in summary_df
samples <- intersect(samples, colnames(summary_df))
print(length(samples))
if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count / length(samples)
gene_counts[[paste0(treatment, "_Down")]] <- down_count / length(samples)
}
# View final table
head(gene_counts)
# View the summary
head(summary_df)
# Save the data
write.csv(gene_counts,paste0(data_folder, "/Epos_Eneg_Deseq2_contrast.csv"), row.names = FALSE)
read.csv(paste0(data_folder, "/Epos_Eneg_Deseq2_contrast.csv"), header = TRUE)
rownames(gene_counts) <- gene_counts$Gene
data_only <- gene_counts[, -1]
# Get top 10 genes for each column
top_genes_list <- apply(data_only, 2, function(col) {
names(sort(col, decreasing = TRUE))[1:10]
})
# Combine all top gene names into one unique set
top_genes_unique <- unique(unlist(top_genes_list))
# Subset the original table with only those genes
top_genes_df <- gene_counts[gene_counts$Gene %in% top_genes_unique, ]
# View the result
top_genes_df
View(top_genes_df)
# Subset the data
top_genes_df_CTEup <- subset_df <- subset(top_genes_df, select = c("CTE25_Up", "CTE31_Up", "CTE45_Up", "CTE46_Up" ))
top_genes_df_CTEup
plot(top_genes_df_CTEup)
top_genes_df
top_genes_df_CTEdown <- subset_df <- subset(top_genes_df, select = c("CTE25_Down", "CTE31_Down", "CTE45_Down", "CTE46_Down" ))
top_genes_df_CTEup
View(top_genes_df_CTEdown)
top_genes_df_CTEdown <- top_genes_df_CTEdown * -1
merged_df <- merge(top_genes_df_CTEup, top_genes_df_CTEdown,
by = "row.names",
all = TRUE)
View(merged_df)
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Gene, names_to = "CloneCondition", values_to = "Count") %>%
filter(!is.na(Count))  # Optional: remove NAs if needed
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
filter(!is.na(Count))  # Optional: remove NAs if needed
View(long_df)
long_df %>%
rename(Row.names = Gene)
long_df %>%
rename(Gene = "Row.names")
long_df %>%
rename(Gene = "Row.names")
long_df <- long_df %>%
rename(Gene = "Row.names")
# Step 3: Extract clone names from column names (e.g., "CTE25_Up" → "CTE25")
long_df <- long_df %>%
mutate(Clone = sub("_.*", "", CloneCondition))
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
rlang::last_trace()
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
long_df <- long_df %>%
rename(Gene = "Row.names")
# Step 3: Extract clone names from column names (e.g., "CTE25_Up" → "CTE25")
long_df <- long_df %>%
mutate(Clone = sub("_.*", "", CloneCondition))
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
is.numeric(long_df$Count)
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Stacked Bar Plot of Differential Expression by Clone",
x = "Gene", y = "Count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack")
rlang::last_trace()
is.numeric(long_df$Count)
sum(is.na(long_df))
str(long_df)
as.factor(long_df$Gene)
long_df$Gene <- as.factor(long_df$Gene)
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack")
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack")
# Step 4: Plot
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
theme_minimal() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
scale_fill_manual(values=c("darkgoldenrod1", "darkslategray1","darkolivegreen2", "darkorchid3"))
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
scale_fill_manual(values=c("darkgoldenrod1", "darkslategray1","darkolivegreen2", "darkorchid3")) +
theme_bw() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
guides(fill=guide_legend(title="New Legend Title"))
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
scale_fill_manual(values=c("darkgoldenrod1", "darkslategray1","darkolivegreen2", "darkorchid3")) +
theme_bw() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Stacked Bar Plot of Differentially Expressed Genes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
guides(fill=guide_legend(title="Genotype"))
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
scale_fill_manual(values=c("darkgoldenrod1", "darkslategray1","darkolivegreen2", "darkorchid3")) +
theme_bw() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Differentially Expressed Genes of E+ and E- Within a Genotype") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
guides(fill=guide_legend(title="Genotype"))
# View final table
head(gene_counts)
View(gene_counts)
# Loop through treatments
for (treatment in names(treatment_lists)) {
samples <- treatment_lists[[treatment]]
# Ensure samples exist in summary_df
samples <- intersect(samples, colnames(summary_df))
print(length(samples))
if (length(samples) == 0) next
# Subset summary_df to relevant columns
subset_df <- summary_df[, samples, drop = FALSE]
# Count Upregulated
up_count <- apply(subset_df, 1, function(x) sum(x == "Upregulated"))
down_count <- apply(subset_df, 1, function(x) sum(x == "Downregulated"))
# Add to final count table
gene_counts[[paste0(treatment, "_Up")]] <- up_count
gene_counts[[paste0(treatment, "_Down")]] <- down_count
}
# View final table
head(gene_counts)
# Save the data
write.csv(gene_counts,paste0(data_folder, "/Epos_Eneg_Deseq2_contrast.csv"), row.names = FALSE)
gene_counts = read.csv(paste0(data_folder, "/Epos_Eneg_Deseq2_contrast.csv"), header = TRUE)
rownames(gene_counts) <- gene_counts$Gene
data_only <- gene_counts[, -1]
# Get top 10 genes for each column
top_genes_list <- apply(data_only, 2, function(col) {
names(sort(col, decreasing = TRUE))[1:10]
})
# Combine all top gene names into one unique set
top_genes_unique <- unique(unlist(top_genes_list))
# Subset the original table with only those genes
top_genes_df <- gene_counts[gene_counts$Gene %in% top_genes_unique, ]
# View the result
top_genes_df
# Subset the data
top_genes_df_CTEup <- subset_df <- subset(top_genes_df, select = c("CTE25_Up", "CTE31_Up", "CTE45_Up", "CTE46_Up" ))
top_genes_df_CTEdown <- subset_df <- subset(top_genes_df, select = c("CTE25_Down", "CTE31_Down", "CTE45_Down", "CTE46_Down" ))
top_genes_df_CTEdown <- top_genes_df_CTEdown * -1
merged_df <- merge(top_genes_df_CTEup, top_genes_df_CTEdown,
by = "row.names",
all = TRUE)
#### Long data then plot
# Step 1: Move rownames to a column
merged_df$Gene <- rownames(merged_df)
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
long_df <- long_df %>%
rename(Gene = "Row.names")
is.numeric(long_df$Count)
# Step 3: Extract clone names from column names (e.g., "CTE25_Up" → "CTE25")
long_df <- long_df %>%
mutate(Clone = sub("_.*", "", CloneCondition))
long_df$Gene <- as.factor(long_df$Gene)
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
scale_fill_manual(values=c("darkgoldenrod1", "darkslategray1","darkolivegreen2", "darkorchid3")) +
theme_bw() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Differentially Expressed Genes of E+ and E- Within a Genotype") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
guides(fill=guide_legend(title="Genotype"))
gene_counts = read.csv(paste0(data_folder, "/Epos_Eneg_Deseq2_contrast.csv"), header = TRUE)
rownames(gene_counts) <- gene_counts$Gene
data_only <- gene_counts[, -1]
# Get top 10 genes for each column
top_genes_list <- apply(data_only, 2, function(col) {
names(sort(col, decreasing = TRUE))[1:10]
})
# Combine all top gene names into one unique set
top_genes_unique <- unique(unlist(top_genes_list))
# Subset the original table with only those genes
top_genes_df <- gene_counts[gene_counts$Gene %in% top_genes_unique, ]
# View the result
top_genes_df
# Subset the data
top_genes_df_CTEup <- subset_df <- subset(top_genes_df, select = c("CTE25_Up", "CTE31_Up", "CTE45_Up", "CTE46_Up" ))
top_genes_df_CTEdown <- subset_df <- subset(top_genes_df, select = c("CTE25_Down", "CTE31_Down", "CTE45_Down", "CTE46_Down" ))
top_genes_df_CTEdown <- top_genes_df_CTEdown * -1
merged_df <- merge(top_genes_df_CTEup, top_genes_df_CTEdown,
by = "row.names",
all = TRUE)
View(merged_df)
#### Long data then plot
# Step 1: Move rownames to a column
merged_df$Gene <- rownames(merged_df)
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
#### Long data then plot
# Step 1: Move rownames to a column
merged_df$Gene <- rownames(merged_df)
merged_df <- merge(top_genes_df_CTEup, top_genes_df_CTEdown,
by = "row.names",
all = TRUE)
#### Long data then plot
# Step 1: Move rownames to a column
merged_df$Gene <- merged_df$Row.names
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
merged_df$Row.names <- NULL
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
merged_df <- merge(top_genes_df_CTEup, top_genes_df_CTEdown,
by = "row.names",
all = TRUE)
#### Long data then plot
# Step 1: Move rownames to a column
merged_df$Gene <- merged_df$Row.names
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Row.names, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
rlang::last_trace()
merged_df$Row.names <- NULL
# Step 2: Pivot to long format
long_df <- merged_df %>%
pivot_longer(-Gene, names_to = "CloneCondition", values_to = "Count") %>%
mutate(Count = as.numeric(Count)) %>%         # Ensure Count is numeric
filter(!is.na(Count))                         # Remove NA values
is.numeric(long_df$Count)
# Step 3: Extract clone names from column names (e.g., "CTE25_Up" → "CTE25")
long_df <- long_df %>%
mutate(Clone = sub("_.*", "", CloneCondition))
long_df$Gene <- as.factor(long_df$Gene)
# Step 4: Plot
# Explanation: This plot max is -4 and 4. Each clone can get a max of 1.
# This shows top 10 deregulated genes in all Clones
ggplot(long_df, aes(x = Gene, y = Count, fill = Clone)) +
geom_bar(stat = "identity", position = "stack", colour="black") +
scale_fill_manual(values=c("darkgoldenrod1", "darkslategray1","darkolivegreen2", "darkorchid3")) +
theme_bw() +
ylab("Count (Upregulated = +, Downregulated = -)") +
xlab("Gene") +
ggtitle("Differentially Expressed Genes of E+ and E- Within a Genotype") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
guides(fill=guide_legend(title="Genotype"))
View(long_df)
head(long_df)
head(merged_df)
install.packages("ComplexUpset")
library(ComplexUpset)
upset(binary_df,
intersect = colnames(binary_df)[-which(names(binary_df) == "Gene")],
name = "Genes",
base_annotations = list('Intersection size' = intersection_size()))
# Binary data for upset plot
binary_df <- merged_df %>%
mutate(across(-Gene, ~ ifelse(. != 0, 1, 0)))
upset(binary_df,
intersect = colnames(binary_df)[-which(names(binary_df) == "Gene")],
name = "Genes",
base_annotations = list('Intersection size' = intersection_size()))
View(binary_df)
results_list_CloneXHTxTreat
View(gene_counts)
gene_counts
top_genes_list <- apply(data_only, 2, function(col) {
# Filter out values that occur fewer than 2 times
filtered_col <- col[col >= 2]
})
View(top_genes_list)
top_genes_list
data_only
cte_ids <- unique(sub("_.*", "", colnames(data_only)))
cte_sums <- list()
for (cte in cte_ids)
{
cols <- grep(paste0("^", cte, "_"), colnames(data_only), value = TRUE)
cte_sum <- rowSums(data_only[, cols, drop = FALSE])
cte_sums[[cte]] <- cte_sum
}
final_CTE_DEGs <- as.data.frame(cte_sums)
rownames(final_CTE_DEGs) <- rownames(data_only)
final_CTE_DEGs
rownames(gene_counts) <- gene_counts$Gene
data_only <- gene_counts[, -1]
# Get top 10 genes for each column
top_genes_list <- apply(data_only, 2, function(col) {
names(sort(col, decreasing = TRUE))[1:10]
})
# Combine all top gene names into one unique set
top_genes_unique <- unique(unlist(top_genes_list))
# Subset the original table with only those genes
top_genes_df <- gene_counts[gene_counts$Gene %in% top_genes_unique, ]
# View the result
top_genes_df
# Subset the data
top_genes_df_CTEup <- subset_df <- subset(top_genes_df, select = c("CTE25_Up", "CTE31_Up", "CTE45_Up", "CTE46_Up" ))
top_genes_df_CTEdown <- subset_df <- subset(top_genes_df, select = c("CTE25_Down", "CTE31_Down", "CTE45_Down", "CTE46_Down" ))
top_genes_df_CTEdown <- top_genes_df_CTEdown * -1
merged_df <- merge(top_genes_df_CTEup, top_genes_df_CTEdown,
by = "row.names",
all = TRUE)
# Binary data for upset plot
binary_df <- merged_df %>%
mutate(across(-Gene, ~ ifelse(. != 0, 1, 0)))
upset(binary_df,
intersect = colnames(binary_df)[-which(names(binary_df) == "Gene")],
name = "Genes",
base_annotations = list('Intersection size' = intersection_size()))
var1 = "hi"
var2 = 2
var3 = var1 + var2
traceback
traceback()
var3 = var1 + var2
traceback()
traceback
install.packages("gapminder")
library(ggplot2)
library(plyr)
