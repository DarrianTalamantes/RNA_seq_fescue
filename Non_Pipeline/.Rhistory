result_key <- paste0(clone_name, "_", endo_status)
tryCatch({
res <- get_results(Featurecount, metadata, clone_name, endo_status)
results_list[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
clone_name
endo_status
get_results <- function(CountsData, Metadata, CloneName, EndoStatus){
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Endophyte == EndoStatus,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(sample_names, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = CountsData,
colData = meta_clone_endo,
design = ~ Treatment)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
for (clone_name in unique(metadata$Clone)) {
for (endo_status in unique(metadata$Endophyte)) {
result_key <- paste0(clone_name, "_", endo_status)
tryCatch({
res <- get_results(Featurecount, metadata, clone_name, endo_status)
results_list[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
CountsData
Featurecount
counts[, match(metadata$SampleName, colnames(counts))]
get_results <- function(CountsData, Metadata, CloneName, EndoStatus){
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Endophyte == EndoStatus,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(Metadata$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = CountsData,
colData = meta_clone_endo,
design = ~ Treatment)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# 1. Get all unique combinations of Clone and Endophyte
combos <- expand.grid(Clone = unique(metadata$Clone),
Endophyte = unique(metadata$Endophyte),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list <- list()
for (clone_name in unique(metadata$Clone)) {
for (endo_status in unique(metadata$Endophyte)) {
result_key <- paste0(clone_name, "_", endo_status)
tryCatch({
res <- get_results(Featurecount, metadata, clone_name, endo_status)
results_list[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
################################################################################
# Using the function to create all data sets
################################################################################
Featurecount[, match(metadata$SampleName, colnames(Featurecount))]
get_results <- function(CountsData, Metadata, CloneName, EndoStatus){
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Endophyte == EndoStatus,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = CountsData,
colData = meta_clone_endo,
design = ~ Treatment)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
for (clone_name in unique(metadata$Clone)) {
for (endo_status in unique(metadata$Endophyte)) {
result_key <- paste0(clone_name, "_", endo_status)
tryCatch({
res <- get_results(Featurecount, metadata, clone_name, endo_status)
results_list[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
get_results <- function(CountsData, Metadata, CloneName, EndoStatus){
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Endophyte == EndoStatus,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Treatment)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# 1. Get all unique combinations of Clone and Endophyte
combos <- expand.grid(Clone = unique(metadata$Clone),
Endophyte = unique(metadata$Endophyte),
stringsAsFactors = FALSE)
# 2. Loop over each combination and run the function
results_list <- list()
for (clone_name in unique(metadata$Clone)) {
for (endo_status in unique(metadata$Endophyte)) {
result_key <- paste0(clone_name, "_", endo_status)
tryCatch({
res <- get_results(Featurecount, metadata, clone_name, endo_status)
results_list[[result_key]] <- res
message("Successfully processed: ", result_key)
}, error = function(e) {
message("Error in: ", result_key, " - ", e$message)
})
}
}
results_list
results_list$CTE25_Negative
results(results_list$CTE25_Negative)
results(results_list$CTE46_Positive)
results(results_list$CTE25_Negative)
results(results_list$CTE46_Positive)
library(pheatmap)
generate_heatmap_pheatmap <- function(dds, comparison_name, metadata) {
# Variance Stabilizing Transformation
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Subset metadata to just samples in this DESeq2 object
meta_sub <- metadata[metadata$SampleName %in% colnames(vsd_mat), ]
# Reorder metadata to match vsd_mat column order
meta_sub <- meta_sub[match(colnames(vsd_mat), meta_sub$SampleName), ]
# Calculate variance across genes
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Column annotation
ann_col <- data.frame(Treatment = meta_sub$Treatment)
rownames(ann_col) <- meta_sub$SampleName
# Heatmap
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",  # Normalize each gene
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap <- function(comparison_name, results_list, metadata) {
dds <- results_list[[comparison_name]]
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, Treatment)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col["Treatment", drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap(CTE25_Negative,results_list,metadata)
generate_heatmap_pheatmap <- function(comparison_name, results_list, metadata) {
dds <- results_list$comparison_name
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, Treatment)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col["Treatment", drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap(CTE25_Negative,results_list,metadata)
generate_heatmap_pheatmap <- function(comparison_name, results_list, metadata) {
dds <- results_list[[comparison_name]]
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, Treatment)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col["Treatment", drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap(CTE25_Negative,results_list,metadata)
traceback()
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata)
generate_heatmap_pheatmap <- function(comparison_name = "CTE25_Negative", results_list, metadata) {
if (!is.character(comparison_name) || length(comparison_name) != 1) {
stop("comparison_name must be a single string.")
}
dds <- results_list[[comparison_name]]
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, Treatment)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col["Treatment", drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata)
################################################################################
# DeSeq
################################################################################
# remaking og dds file
dds <- dds_og
generate_heatmap_pheatmap <- function(comparison_name = "CTE25_Negative", results_list, metadata) {
if (!is.character(comparison_name) || length(comparison_name) != 1) {
stop("comparison_name must be a single string.")
}
dds <- results_list[[comparison_name]]
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, Treatment)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col["Treatment", drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata)
generate_heatmap_pheatmap <- function(comparison_name = "CTE25_Negative", results_list, metadata, seperator = "Treatment") {
if (!is.character(comparison_name) || length(comparison_name) != 1) {
stop("comparison_name must be a single string.")
}
dds <- results_list[[comparison_name]]
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, seperator)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col[seperator, drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata,"Treatment")
generate_heatmap_pheatmap <- function(comparison_name = "CTE25_Negative", results_list, metadata, seperator = "Treatment") {
if (!is.character(comparison_name) || length(comparison_name) != 1) {
stop("comparison_name must be a single string.")
}
dds <- results_list[[comparison_name]]
# Extract normalized counts
vsd <- vst(dds, blind = FALSE)
vsd_mat <- assay(vsd)
# Calculate variance for each gene
gene_vars <- apply(vsd_mat, 1, var)
# Select top 50 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:50]
vsd_sub <- vsd_mat[top_genes, ]
# Annotation for columns (samples)
ann_col <- metadata %>%
dplyr::filter(SampleName %in% colnames(vsd_sub)) %>%
dplyr::select(SampleName, seperator)
rownames(ann_col) <- ann_col$SampleName
ann_col <- ann_col[seperator, drop = FALSE]
# Plot
pheatmap(vsd_sub,
annotation_col = ann_col,
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = paste("Top 50 Variable Genes:", comparison_name))
}
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata,"Treatment")
colnames(metadata)
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata,"Year")
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata,"HarvestTime")
# make deseq object that is based only on Clone name
dds_by_CloneXEndo <-  function(CountsData, Metadata, CloneName) {
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
# Subset counts to only include samples that are in the meta_clone dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone$SampleName, colnames(counts))]
# Create DESeq2 object
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone,
design = ~ Treatment)  # or include other factors if needed
dds_clone <- DESeq(dds_clone)
# Filter for genes with counts >=5 in at least 1/4 of samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# partitions the data by CLone and Endophyte and returns deseq object
dds_by_CloneXEndo <- function(CountsData, Metadata, CloneName, EndoStatus){
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
meta_clone_endo <- meta_clone[meta_clone$Endophyte == EndoStatus,]
# Subset counts to only include samples that are in the meta_clone_endo dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone_endo$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone_endo$SampleName, colnames(counts))]
# Now create dds for that subset
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone_endo,
design = ~ Treatment)  # or other factors
dds_clone <- DESeq(dds_clone)
# filter for genes that have 10 occurrences in 1/4 the samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
# make deseq object that is based only on Clone name
dds_by_Clone <-  function(CountsData, Metadata, CloneName) {
# Subset metadata for one Clone (e.g., Clone1)
meta_clone <- Metadata[Metadata$Clone == CloneName, ]
# Subset counts to only include samples that are in the meta_clone dataset
counts <- CountsData[, colnames(CountsData) %in% meta_clone$SampleName]
# Reorder columns of counts to match row order of metadata
counts <- counts[, match(meta_clone$SampleName, colnames(counts))]
# Create DESeq2 object
dds_clone <- DESeqDataSetFromMatrix(countData = counts,
colData = meta_clone,
design = ~ Treatment)  # or include other factors if needed
dds_clone <- DESeq(dds_clone)
# Filter for genes with counts >=5 in at least 1/4 of samples
keep <- rowSums(counts(dds_clone) >= 5) >= (ncol(dds_clone) / 4)
dds_clone <- dds_clone[keep, ]
return(dds_clone)
}
for (clone_name in unique(metadata$Clone)) {
try({
result <- dds_by_Clone(Featurecount, metadata, clone_name)
results_list_by_clone[[clone_name]] <- result
}, silent = TRUE)
}
results_list_by_clone
# 1. Create a list to hold the results
results_list_by_clone <- list()
for (clone_name in unique(metadata$Clone)) {
try({
result <- dds_by_Clone(Featurecount, metadata, clone_name)
results_list_by_clone[[clone_name]] <- result
}, silent = TRUE)
}
results_list_by_clone$CTE25
results(results_list_by_clone$CTE25)
results(results_list_by_clone$CTE46)
generate_heatmap_pheatmap("CTE25",results_list_by_clone,metadata,"HarvestTime")
generate_heatmap_pheatmap("CTE25_Positive",results_list,metadata,"HarvestTime")
################################################################################
# generating final phenotypes
################################################################################
colnames(metadata)
generate_heatmap_pheatmap("CTE25",results_list_by_clone,metadata,"Replicate")
colnames(metadata)
generate_heatmap_pheatmap("CTE25",results_list_by_clone,metadata,"Treatment")
generate_heatmap_pheatmap("CTE25",results_list_by_clone,metadata,"Endophyte")
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata,"HarvestTime")
results_list_by_clone
colnames(results_list)
names(results_list)
names(results_list_by_clone)
generate_heatmap_pheatmap("CTE45_Negative",results_list,metadata,"HarvestTime")
generate_heatmap_pheatmap("CTE45_Positive",results_list,metadata,"HarvestTime")
generate_heatmap_pheatmap("CTE45",results_list_by_clone,metadata,"HarvestTime")
generate_heatmap_pheatmap("CTE45",results_list_by_clone,metadata,"Endophyte")
################################################################################
# generating final phenotypes
################################################################################
colnames(metadata)
generate_heatmap_pheatmap("CTE45",results_list_by_clone,metadata,"Treatment")
generate_heatmap_pheatmap("CTE45_Negative",results_list,metadata,"Treatment")
generate_heatmap_pheatmap("CTE45_Positive",results_list,metadata,"Treatment")
generate_heatmap_pheatmap("CTE45_Negative",results_list,metadata,"HarvestTime")
generate_heatmap_pheatmap("CTE45_Positive",results_list,metadata,"HarvestTime")
generate_heatmap_pheatmap("CTE45",results_list_by_clone,metadata,"HarvestTime")
################################################################################
# generating final phenotypes
################################################################################
colnames(metadata)
generate_heatmap_pheatmap("CTE25_Negative",results_list,metadata,"Month")
generate_heatmap_pheatmap("CTE25_Positive",results_list,metadata,"Month")
generate_heatmap_pheatmap("CTE25",results_list_by_clone,metadata,"Month")
